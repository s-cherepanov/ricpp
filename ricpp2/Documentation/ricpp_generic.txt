What we have:

Context
	Primary Objects:
		Declarations ( are options ? )
		Blocks (e.g. Outside, frame, world, motion, solid, object, archive ...)
		Options: Camara, output channels, "Control Attributes"
			Parameters
		Lights
		Attributes: CTM at (Transformation Matrix Stack) TMS, Light state, current primary, "Control Attributes"

			Parameters
		Graphics: Spheres, Blobbies, Lightweights Points and Curves, Nurbs, Polygons, ...
			Parameters (Ri_P, generic one via RiDeclare)
	Concrete Scene Graph (generated by animation or other builder):
		DAG of Primary Objects
	Graphics State (while iterating and building? Scene Graph, State Object):
		Block State
		Attribute Stack
		TMS:             Composite transformation matrix and its inverse
		Option stack:    camara options, Frame Number, ...
		Global Light List
		Named Transformations


Animation: RIB is static frame by frame, no coherence between frames
	Animation needs coherence, explicit camara object may be helpful,
	generates RIB (scene graphs) out of generic scene graphs (Sequence Graphs).
	Generic scene graph: variables for Primary Objects and parts of primary Objects (parameters, lightweight particles),
	loops, curves (trajectories, Trajectory synthesis) subroutines and all - dynamic structure like a program
	Need strategy for building and discarding of scene graphs (parts of scene graphs)
	Physics add a new dimention (physics engine, mechanics), collision detection, speed and acceleration,
	new parameters like elaticity and plasticity, energy forms, deformations and rigging, fluids, spring models, texture
	map and parameter and shader animation (lots of animation types), vector field animation
	Aliasing between frames
	Simulating

	Interactive animation tools and textural representation of an animation sequence (s.a. Steve Mays work)

	Timing and frame sequence

Animation and contexts? Animation part of context, context part of animation?
Every animation runs an own context

Rib-Loader (Entity or complete file - cope with hugh RIBs frame by frame),
visualization of the resulting Scene graph, visual tools for RIB
Animation Builder, parametrization of the Scene graph for Animation

Renderers and Contexts? Renderer can render a context, uses an iterator for the scene graph
Depending on type of renderer vertex stack, Kd-tree etc. RIB output 'renderer' maybe won't need
a scene graph - so renderer trigger the generation of a scene graph?
Renderers: RIB, OpenGL, REYES z-bUFFER, Ray tracer, Radiosity, Mixed renderer, ...

Scene graph builder

Memory management needed


RenderMan: Interface for Renderer, Describes a physical Film, single frames on by the other, describes the physical appearance
		Renderer: Handles optics and light interaction
		Aquisition "Scanning"
		Scene Graph is iterated
AniMan:    Interface for Animator, Describes a Plot, Single Sequences on by the other, describes the physical behaviour
		Animator: Handles Mechanics and (mechanical) energy, state changes
		Aquisition "Motion capture"
		Sequence Graph is interpreted -> generates scene graph

Animation Loop:
	Init Scene Graph
	Loop:
		Build Concrete Scene graph (ScG) out of Generic Scene Graph (Sequence Graph SeqG) -  next frame
		Trigger renderer to render frame
		Destroy obsolete parts of the Concrete Scene graph


A cut can be viewed as a sequence, a single picture of the cut as the frame

ModelMan interactive tool for AniMan

Com-Adapter for RiCPP

RICPP-versioning: Major: Interface Change, Minor: Implementation change

Link List:

http://grail.cs.washington.edu/pub/abstracts.html (Publications of GRAIL, the Graphics and Imaging Laboratory
of the University of Washington's Department of Computer Science and Engineering.)

ACM Journal of Visualization and Computer Animation

------
Ähm

Flüchtigkeit auf englisch?
Markov Graphs?
Motion Graphs?

