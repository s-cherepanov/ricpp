/*! \mainpage RiCPP
\section intro_sec Introduction

Important note: RiCPP is not developed (only a few classes exist), the documentation also
in a very draft state is not describing what is, but more what
will be, hopefully.

RenderMan(R) can be seen generally as an interface between modeller
(the software that produces 3D scenes) and renderer (the software that
produces 'renders' a visible representation of the 3D scene description);
it is a kind of high level 3D API (Application Interface) though. Using the
RenderMan interface you can describe complete 3D scenes with objects,
transformation, lights, shading methods, camera settings and so on in
a higher level a using OpenGL for instance. The sequence of scenes
of an animation is given in a rendering method independent form frame
by frame. Also, the language that is used to write procedural shading
and texture mapping tools is part of the RenderMan Interface. The
Interface and a photorealistic renderer for it were invented by the
company Pixar in the late 80's and both are still popular today.

The RenderMan interface is implemented using a variety
of languages, so called language bindings. Most common are the C-binding for the
programming language 'C' and the RIB-binding. RIB is the acronym for
RenderMan Interface Bytstream, a data stream format to transport and archive
the serialized RenderMan interface calls. RIB output can
be written to files (either in a human readable ASCII format or in a more
compact binary format or a mixed format) and used by renderers for the later offline
rendering. It also can be transported over a network to one or more renderer servers.

Renderers that can cope with the RenderMan interface are called RenderMan complient
renderers. The first renderer written for the RenderMan Interface, implemented the
REYES (Renders Everything You Ever Saw) algorithm. For a longer time this renderer
'prman' of the company Pixar was the only renderer providing a RenderMan interface,
it became very famous. There are some renderers available nowadays, that use
different rendering methods.

RiCPP is not a renderer, it is a C++ framework for the RenderMan(R) interface,
a C++ language binding. RiCPP can be used to write renderers. Like the
C-language QuickRenderMan Interface, that was part of the NextStep operation system,
it provides a frontend C++-binding, that calls the rendering routines of one
or more concrete backend renderers, also written in C++, that can be bound as
dynamic libraries.

Also some basics of the backend are part of RiCPP. The two 'renderers'
that (will) come with RiCPP are the RIBWriter (a 'renderer' that uses RIB as
output format) and a draft renderer for OpenGL output. The later will be a very
simple one that does not provide the features, like procedural shading, of a
'real' RenderMan complient renderer.

\section implementation_sec Implementation

These web pages are the doxygen output of the technical documentation of RiCPP
I'm currently working on. RiCPP is also the name of the namespace for all
elements of this framework. The classes CRiCPPBridge and CRendererLoader are two
main parts of the frontend, that bridges to the backend, a class derived from
CBaseRenderer. An instance of CRiCPPBridge implements the interface IRi, and
that is the only interface you need to see, if you only want to use RiCPP as an API
to connect with a backend renderer. IRi (#include "ricpp/ricpp/ricpp.h") is
similar to the declarations of the C-binding in ri.h.

At the moment I'm developing RiCPP using Visual Studio 2005 (the express edition
with PSDK for the 32Bit version will do) for MS Windows and XCode on Apple's
MacOS 10.x. There is of course a plan to port to Linux later. You can find
the sources on the SVN server of project ricpp on SourceForge in the ricpp2
subfolder. The ricpp subfolder contains an older version of RiCPP.

\section literature_sec Literature

You can learn a lot of RenderMan by these books and documents:

 <ul>
 <li> [ARM2000] Apodaca, Gritz et all; Advanced RenderMan; 2000, Morgan Kaufman </li>
 <li> [RAG2005] Saty Raghavachary; Rendering for Beginners; 2005, Elsevier </li>
 <li> [RISPEC3.2] Pixar; The RenderMan Interface Version 3.2.1; Nov 2005, PDF document, the reference </li>
 <li> [STE2003] Ian Stephenson; Essential RenderMan fast; 2003, Springer </li>
 <li> [STE2005] Ian Stephenson (Ed.); Production Rendering; 2005, Springer (another OO-framework) </li>
 <li> [UPS89] Steve Upstill; The RenderMan Companion; 1989, Addison Wesley </li>
 <li> [QRM] Quick RenderMan (once supplied as QRMSpec.rtfd with NextStep) </li>
</ul>

\section renderers_sec RenderMan complient renderers

Some commercial renderes are:

<ul>
<li> <a href="http://www.3delight.com/">3Delight</a>, DNA research </li>
<li> <a href="http://www.sitexgraphics.com/">Air</a>, SiTex Graphics</li>
<li> <a href="http://www.pixar.com/">prman</a>, Pixar's photorealistic renderer </li>
<li> <a href="http://www.dotcsw.com/">RenderDotC</a>, Dot C Software, Inc. </li>
</ul>

Some free one's:

<ul>
<li> <a href="http://www.aqsis.org/">Aqsis</a>, REYES renderer </li>
<li> <a href="http://jrman.sourceforge.net/">JrMan</a>, a REYES Java implementation </li>
<li> <a href="http://www.cs.utexas.edu/~okan/Pixie/pixie.htm">Pixie</a>, with raytracing</li>
<li> BMRT, canceled, but still available at some sites </li>
</ul>

Selection of modellers:

<ul>
<li> <a href="http://aqsis.sourceforge.net/">Ayam</a> is free an can produce RIB </li>
<li> <a href="http://www.imagos.fl.net.au/">Breeze designer</a>, also free, easy to use and some basic RIB output </li>
</ul>

\section websites_sec Websites for RenderMan

Only two out of many:

<ul>
<li> <a href="http://www.renderman.org/">RenderMan Repository</a> </li>
<li> <a href="http://www.rendermanacademy.com/">The RenderMan Academy</a> </li>
</ul>

And don't forget comp.graphics.rendering.renderman and the
<a href="http://www.faqs.org/faqs/graphics/renderman-faq/">RenderMan-FAQ</a>. 

\section copyright_sec Copyright notice

     RenderMan(R) is a registered trademark of Pixar
	 
 The RenderMan(R) Interface Procedures and Protocol are:
 
         Copyright 1988, 1989, 2000, 2005 Pixar
		 
                 All rights Reservered
				 
*/

/*! \page page_decl Declaration of variables

\section page_decl_sec1 The declaration types

Declaration of parameter types, general request, allowed in all blocks.

An interface request (e.g. Sphere, Polygon, Attribute ...) usually
has the following form:

request [requestspecific_parameters] {parameter valuelist}

A parameter is either a token of a predefined variable, a declaration
previously made or an inline declaration

"[[class] type ['[' n ']']] name"

The declaration and the
request with it's requestspecific parameters gives the size of the
valuelist and the type of it's elements s.a. [AppNote22]. Parameters
correspondent to shader variables or predefined variables.

To issue a declaration, you need to make a 'Declare' request

RIB-binding

Declare name [[class] type ['[' n ']']]

RiCPP binding (namespace RiCPP)

RtToken CRiRoot::declare(const char *name, const char *declaration);

This request will declare a token name 'globally' of 
specific class (i.e. storage modifier), type and arraysize.

class can be

<ul>
<li>constant     - one constant value for the whole primary</li>
<li>uniform      - one value per face of the primary</li>
<li>varying      - one value per vertex the values are
               interpolated linearily</li>
<li>vertex       - one value per vertex the values are
               interpolated like the positions</li>
<li>facevarying  - one value per vertex of each face the values
               are interpolated linearily across the face</li>
<li>facevertex   - one value per vertex of each face the values
               are interpolated across the face like the positions</li>
</ul>

If the value for class is missing, uniform is assumed.

- in some primaries like Sphere varying and vertex are
  the same and there is only one face, so facevarying and facevertex
  have the same size as varying or vertex variables. You should use
  the less specific (varying in this example) in these cases.

Type is one of

float, integer, string, point (3 floats), 
vector (3 floats), normal (3 floats), hpoint (4 floats), matrix (16 floats),
color (color is special because the number of floats
can be changed with a request ColorSamples, there are 3 floats normally)

- integer and hpoint do not occur as types for shader variables. Because
  there is no use for integers in shading [ARM] and the hpoints are only
  used to calculate the points of rational or non-rational B-Spline surfaces
  and trimcurves. Implementation hint: string needs some extra attention
  (valuelist is of type pointer to string, not of string), also colours
  need special handling, because the number of colour components can
  vary.

The type can be an array of size n (affects the number of elements in the
valuelist), if n is missing it is set to 1.

If class, type and n is missing, name is only tokenized (bound with an index).
The token name then cannot bind any values.

The declaration is said to be 'global', it overwrites a declaration of
the same name previously made by writing the declaration into a 'global'
directory. RiCPP overwrites only the declarations in the same context,
'global' means only 'global' within the same context. Overwriting contextes
of a scene by a declaration of another makes no sense and violates the
isolation of the contexts badly. I consider this global overwriting as
potential harmfull to the consistency of a scene. It is prone of conflicts.
Imagine you include a RIB entity or archive that does some arbitrary
declarations that overwrite your own. In the best case you can figure out
these declarations and redeclare them after the ReadArchive request.

Within object blocks declarations are stored into the global directory.
If you call the 'ObjectInstance' request the declaration dictionary
will be the same after the execution of the 'ObjectInstance'
request. Implementation hint: Internally the declaration stack gets
manipulated while 'replaying' the object block, but it gets restored
before the next request - or since all parameters are bound, the
Declare requests don't need to be replayed.

If you like to declare variables for your selfwritten shaders,
you can adopt the naming scheme of QuickRenderMan's qualified token names:
{namespace:{table:}}var like shadertype:shadername:variablename
to avoid some conflicts, s.a. [kaushik]. Of course if another
one writes a shader with the same name and shadertype the conflict
persists. You can also generally use inline declarations.


\section page_decl_sec2 Implementation hint

'inline' declaritions are helpful, but nothing prevents you from using a
parameter "vertex point P" for your request. RiCPP must figure out that the
"P" in "vertex point P" is RI_P, with the same semantics - usually not a problem.
RI_P is not only forwarded to a shader variable "P" but is also used to
generate the positions of the vertices of a graphics primary. It will
lead to trouble, if you declare "uniform point P", wheras there is nothing wrong
in declaring "uniform color Cs" or "constant color Cs" as you like, but
"constant string Cs" will not work. In [AppNote7] it is strongly recommended
not to change the type of parameters that have special meaning to
the renderer. You can also find a list of these variables there:

\subsection page_decl_sec2_1 GENERAL RI PARAMETERS

Cs az epsilon2 near hither subwindow
N bias0 eyesplits origin t
Ng bias1 flatness print texture
Np binary fov rgb texturememory
Os bucketsize gridarea rgba trimdeviation
P bucketstride gridsize rgbaz z
Pw displacement interleave rgbz
Pz dynamic jitter s
a endofframe merge shader
algorithm epsilon1 name st

\subsection page_decl_sec2_2 SHADER PARAMETERS

Ka amplitude conedeltaangle lightcolor specularcolor
Kd background distance maxdistance texturename
Kr beamdistribution from mindistance to
Ks coneangle intensity roughness

Nevertheless, the framework must handle the cases if the declaration of
these variables are changed.

The declarations are destroyed at the IRi::end() of the context.

Literature: [RiSPEC] [ARM] [RMC] [AppNote7] [AppNote22] [kaushik] [PRMAN10]

\section page_decl_sec3 Notes and problems

facevarying and facevertex are not yet mentioned in the specs.
facevarying announced in RenderMan Release Notes 10 [PRMAN10]
facevertex seems only be adopted by a minor number of renderers,
afaik it makes only sense in bicubic patch meshes, nupatches
and maybe subdivision surfaces
"All standard variable types are supported: constant, uniform, varying, vertex,
facevarying and facevertex. facevertex is used exactly as facevarying but
interpolates the variables according to surface's subdivision rules. " [3dlight]

If the declarations get "overwritten" the cannot be deleted since e.g.
parameter names within objects bear a pointer to their declaration.

Problems with the scope of declarations

Problems if procedure calls are not executed or are executed by level of
detail - different variables might be declarated - doesn't matter, simply
issue everyone (linear with the requests).

Caching of ReadArchive calls for the same RIB archive, parameters are bound only
the first time the ReadArchive is executed, since maybe a different variable set is
declared at the different ReadArchive calls, that can lead to confilcts.

If spliting a ribfile frame by frame for rendering single frames
over the network, the state (also the declarations) must be stored
right after FrameEnd

@verbatim
Begin
FrameBegin 1
FrameEnd
[state snapshot]

FrameBegin 2
FrameEnd
End

--->

Begin
FrameBegin 1
FrameEnd
End

Begin
[state snapshot]
FrameBegin 2
FrameEnd
End


Example
-------

Begin
[variable set 1]
ObjectBegin 1
	[variable set 1 is valid here]
	do some Declare -> [Variable Set 2]
ObjectEND

[variable set 2]

Some more declarations

[variable set 3]
ObjectInstance 1 -- Within Object [variable set 1] is valid
[variable set 3] -- Even if declarations occur in ObjectInstance 1

ReadArchive "TheArchive.rib" -- [variable set 3] is valid, maybe some Declare

[variable set 4]

Some more declarations

[variable set 5]

ReadArchive "TheArchive.rib" -- [variable set 5] is valid, not [variable set 3] if not cached
                             -- [variable set 3] would be used if "TheArchive.rib" is cached
                             -- maybe some Declare

[variable set 6 - mixture of 4 or 5]

end
@endverbatim

If "TheArchive.rib" is parsed into a cache, this is done with [variable set 3] at
the beginning. If this archive sets some more declarations, [variable set 4]
results. Some more declares leads to [variable set 5]. If the next ReadArchive uses
the parsed data of the first read, [variable set 3] is used instead of [variable
set 5]. Of course the variables from set 3 and 5 must be declared in a manner, that
the archive can be read without errors, the sizes of the valuelists don't change.
However the class (vertex or varying) and color definition can be different and
therefore the resulting objects may be rendered in a different way.
Caching the archive file may gain a lot performance, and changeing
the class of a declaration for the same archive included at differend
places is incommon. I include a boolean control attribute ricpp:control:cachearchive
which can be used to enable archive caching, dispite the
problems with the declares. Differently to ObjectInstance, the declares issued in a
RIB-Archive do effect the declaration dictionary.

\section page_decl_sec4 Implementation

Declarations in RiCPP are implemented by the class @c CDeclaration in collaboration
with @c CDeclarationDict, @c CTokenizer and @c CToken.

@see
<ul>
<li>CRiCPP::CDeclaration</li>
<li>CRiCPP::CDelarationDictionary</li>
<li>CRiCPP::CToken</li>
<li>CRiCPP::CTokenizer</li>
</ul>

*/