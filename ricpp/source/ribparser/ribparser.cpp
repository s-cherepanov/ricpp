// RICPP - RenderMan Interface CPP Language Binding
//         RenderMan is (R) by Pixar
//         Windows is (R) by Microsoft
//
// Copyright © 2001 - 2002, Andreas Pidde
//
// Contact: andreas@pidde.de
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//  
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/*! \file ribparser.cpp
*  \brief Parser for RIB files
*  \author Andreas Pidde (andreas@pidde.de)
*/

#include "stdafx.h"
#include "ribparser.h"

#include <assert.h>
#include <iostream>

static int riStateTab[848][52] = {
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 840, 847, 847, 847, 847, 53, 20, 155, 13, 1, 27, 417, 255, 235, 847, 847, 290, 114, 633, 100, 165, 241, 271, 87, 70, 847, 847, 40, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 25, 847, 847, 847, 2, 847, 847, 847, 847, 847, 228, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 3, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 4, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 5, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 6, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 7, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 8, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 9, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 10, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 11, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 12, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 14, 847, 847, 847, 249, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 15, 847, 847, 539, 847, 847, 847, 847, 847, 847, 847, 847, 847, 187, 847, 847, 847, 408, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 16, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 17, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 18, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 19, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 483, 847, 847, 847, 21, 847, 847, 847, 847, 847, 847, 694, 847, 847, 404, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 22, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 23, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 24, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 26, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 128, 847, 847, 28, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 29, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 30, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 31, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 133, 32, 847, 847, 37, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 33, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 34, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 35, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 36, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 38, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 39, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 41, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 42, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 43, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 44, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 45, 847, 847, 50, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 46, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 47, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 48, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 49, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 51, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 52, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 301, 847, 54, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 326, 847, 847, 847, 847, 55, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 56, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 57, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 58, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 59, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 60, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 61, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 62, 847, 847, 67, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 63, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 64, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 65, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 66, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 68, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 69, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 361, 847, 847, 847, 847, 847, 847, 847, 847, 847, 685, 847, 847, 71, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 72, 847, 847, 847, 847, 847, 847, 847, 487, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 73, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 74, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 75, 847, 847, 847, 847, 847, 524, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 76, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 77, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 78, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 79, 847, 847, 84, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 574, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 80, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 81, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 82, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 83, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 85, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 86, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 144, 847, 847, 847, 847, 197, 479, 847, 536, 847, 847, 847, 88, 653, 847, 847, 847, 847, 320, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 89, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 90, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 91, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 92, 847, 847, 97, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 93, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 94, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 95, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 96, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 98, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 99, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 101, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 285, 847, 453, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 102, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 103, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 104, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 105, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 106, 847, 847, 111, 847, 847, 847, 745, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 107, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 108, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 109, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 110, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 112, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 113, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 400, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 115, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 116, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 117, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 118, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 119, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 120, 847, 847, 125, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 121, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 122, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 123, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 124, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 126, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 127, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 129, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 130, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 131, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 132, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 134, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 135, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 136, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 137, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 138, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 139, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 140, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 141, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 142, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 143, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 533, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 145, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 146, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 147, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 148, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 149, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 150, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 151, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 152, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 153, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 154, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 175, 847, 847, 260, 847, 847, 156, 847, 847, 689, 847, 847, 847, 659, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 157, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 158, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 159, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 160, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 161, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 162, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 163, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 164, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 625, 847, 847, 847, 514, 847, 847, 847, 203, 847, 847, 847, 847, 847, 580, 847, 847, 166, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 167, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 699, 847, 847, 847, 847, 847, 847, 168, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 169, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 170, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 171, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 172, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 173, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 174, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 176, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 177, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 178, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 179, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 180, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 181, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 182, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 183, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 184, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 185, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 186, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 188, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 189, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 190, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 191, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 192, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 193, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 194, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 195, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 196, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 378, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 198, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 199, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 200, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 201, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 202, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 204, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 205, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 206, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 222, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 215, 847, 847, 207, 847, 847, 847, 847} ,
{ 208, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 209, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 210, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 211, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 212, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 213, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 214, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 216, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 217, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 218, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 219, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 220, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 221, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 223, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 224, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 225, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 226, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 227, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 229, 847, 847, 847, 340, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 230, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 231, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 232, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 233, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 234, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 494, 847, 847, 847, 847, 847, 847, 847, 346, 236, 333, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 237, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 238, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 239, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 240, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 242, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 243, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 244, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 245, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 246, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 247, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 248, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 250, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 684, 847, 847, 847, 847, 251, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 252, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 253, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 355, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 254, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 256, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 666, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 257, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 258, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 259, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 261, 847, 501, 548, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 262, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 263, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 264, 847, 847, 847, 847, 847, 847, 847} ,
{ 265, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 266, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 267, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 268, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 269, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 270, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 272, 847, 847, 847, 847, 847, 847, 847, 847, 847, 528, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 819, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 273, 847, 847, 847, 847, 847, 847, 847, 847, 847, 463, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 274, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 275, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 276, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 277, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 278, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 279, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 280, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 281, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 282, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 283, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 284, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 315, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 286, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 287, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 288, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 289, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 291, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 292, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 293, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 294, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 295, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 296, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 297, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 298, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 299, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 300, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 808, 847, 302, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 303, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 304, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 305, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 306, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 307, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 308, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 309, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 310, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 311, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 312, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 313, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 314, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 316, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 317, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 318, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 319, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 640, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 321, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 322, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 323, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 324, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 325, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 327, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 328, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 329, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 330, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 331, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 332, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 334, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 335, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 336, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 337, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 338, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 339, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 341, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 342, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 343, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 344, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 345, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 347, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 348, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 349, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 350, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 351, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 352, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 353, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 354, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 356, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 357, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 358, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 359, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 360, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 362, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 363, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 364, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 365, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 366, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 367, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 368, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 369, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 370, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 371, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 372, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 373, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 374, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 375, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 376, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 377, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 379, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 380, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 381, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 382, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 387, 847, 847, 847, 847, 847, 847, 847, 847, 383, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 384, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 385, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 386, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 388, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 389, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 390, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 391, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 392, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 393, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 394, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 395, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 396, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 397, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 398, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 399, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 753, 847, 847, 847, 847, 847, 847, 847, 847, 401, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 402, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 403, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 405, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 406, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 407, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 409, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 410, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 411, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 412, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 413, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 414, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 415, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 416, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 418, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 586, 419, 847, 847, 847, 847, 828, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 420, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 421, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 422, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 423, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 424, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 744, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 425, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 426, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 439, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 427, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 428, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 429, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 430, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 431, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 432, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 433, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 434, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 435, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 436, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 437, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 438, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 440, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 441, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 442, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 443, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 444, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 445, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 446, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 447, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 448, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 449, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 450, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 451, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 452, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 454, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 455, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 456, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 457, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 458, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 459, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 460, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 461, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 462, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 464, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 465, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 466, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 467, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 468, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 469, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 470, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 471, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 472, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 473, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 474, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 475, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 476, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 477, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 478, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 480, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 481, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 482, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 484, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 485, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 486, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 488, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 489, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 490, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 491, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 492, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 493, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 495, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 496, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 497, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 498, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 499, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 500, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 502, 847, 658, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 836, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 503, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 504, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 505, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 506, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 507, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 508, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 509, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 510, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 511, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 512, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 513, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 515, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 516, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 517, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 518, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 519, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 520, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 521, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 522, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 523, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 525, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 526, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 527, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 529, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 530, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 531, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 532, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 534, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 535, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 537, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 538, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 540, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 541, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 542, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 543, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 544, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 545, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 546, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 547, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 549, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 550, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 551, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 562, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 552, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 553, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 554, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 555, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 556, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 557, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 558, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 559, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 560, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 561, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 563, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 564, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 565, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 566, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 567, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 568, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 569, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 570, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 571, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 572, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 573, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 575, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 576, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 577, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 578, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 579, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 598, 847, 847, 581, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 582, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 583, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 584, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 585, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 587, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 588, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 589, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 590, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 591, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 592, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 593, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 594, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 595, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 596, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 597, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 599, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 600, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 601, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 610, 847, 847, 847, 847, 847, 847, 847, 847, 602, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 603, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 604, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 605, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 606, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 607, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 608, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 609, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 611, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 612, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 613, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 614, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 615, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 616, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 617, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 618, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 619, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 620, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 621, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 622, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 623, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 624, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 676, 847, 626, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 627, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 628, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 629, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 630, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 631, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 632, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 634, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 635, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 636, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 637, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 638, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 639, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 641, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 642, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 643, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 644, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 645, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 646, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 647, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 648, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 649, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 650, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 651, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 652, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 654, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 655, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 656, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 657, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 660, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 661, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 662, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 663, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 664, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 665, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 667, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 668, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 669, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 670, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 671, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 672, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 673, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 674, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 675, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 677, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 678, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 679, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 680, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 681, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 682, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 683, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 686, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 687, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 688, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 690, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 691, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 692, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 693, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 695, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 696, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 697, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 698, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 700, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 706, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 724, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 701, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 702, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 703, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 704, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 705, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 707, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 734, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 708, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 709, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 710, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 711, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 712, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 713, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 714, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 715, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 716, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 717, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 718, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 719, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 720, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 721, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 722, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 723, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 725, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 726, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 727, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 728, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 729, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 730, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 731, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 732, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 733, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 735, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 736, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 737, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 738, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 739, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 740, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 741, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 742, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 743, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 746, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 747, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 748, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 749, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 750, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 751, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 752, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 754, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 762, 783, 847, 847, 847, 847, 847, 847, 847, 847, 766, 847, 847, 847, 847, 847, 847, 802, 755, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 756, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 757, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 758, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 759, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 760, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 761, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 763, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 764, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 765, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 767, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 768, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 769, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 770, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 771, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 772, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 773, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 774, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 775, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 776, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 777, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 778, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 779, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 780, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 781, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 782, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 784, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 785, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 786, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 787, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 788, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 789, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 790, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 791, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 792, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 793, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 794, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 795, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 796, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 797, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 798, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 799, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 800, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 801, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 803, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 804, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 805, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 806, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 807, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 809, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 810, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 811, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 812, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 813, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 814, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 815, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 816, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 817, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 818, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 820, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 821, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 822, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 823, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 824, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 825, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 826, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 827, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 829, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 830, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 831, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 832, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 833, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 834, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 835, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 837, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 838, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 839, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 841, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 842, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 843, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 844, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 845, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 846, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} ,
{ 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847, 847} };
static int riFinalTab[848] = {
-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 0, -8, -8, -8, -8, -8, -8, 1, -8, -8, -8, -8, 2, -8, 3, -8, -8, -8, -8, -8, -8, -8, -8, -8, 4, -8, -8, 5, -8, -8, -8, -8, -8, -8, -8, -8, -8, 6, -8, -8, 7, -8, -8, -8, -8, -8, -8, -8, -8, 40, -8, -8, -8, -8, 8, -8, -8, 9, -8, -8, -8, -8, -8, -8, -8, -8, 64, -8, -8, -8, -8, 10, -8, -8, 11, -8, -8, -8, -8, -8, -8, -8, -8, -8, 12, -8, -8, 13, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 14, -8, -8, 15, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 16, -8, -8, 17, -8, -8, -8, -8, 18, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 19, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 20, -8, -8, -8, -8, -8, -8, -8, -8, -8, 21, -8, -8, -8, -8, -8, -8, -8, -8, -8, 22, -8, -8, -8, -8, -8, -8, 23, -8, -8, -8, -8, 24, -8, -8, -8, -8, -8, -8, -8, -8, -8, 25, -8, -8, -8, -8, -8, 26, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 27, -8, -8, -8, -8, -8, -8, 28, -8, -8, -8, -8, -8, 29, -8, -8, -8, -8, -8, -8, 30, -8, -8, -8, -8, -8, 31, -8, -8, -8, -8, -8, -8, -8, 32, -8, -8, -8, -8, -8, 33, -8, -8, -8, -8, 34, -8, -8, -8, 41, -8, -8, -8, -8, -8, -8, 35, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 36, -8, -8, -8, -8, 37, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 38, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 39, -8, -8, -8, -8, 42, -8, -8, -8, -8, -8, 43, -8, -8, -8, -8, -8, -8, 44, -8, -8, -8, -8, -8, -8, 45, -8, -8, -8, -8, -8, 46, -8, -8, -8, -8, -8, -8, -8, -8, 47, -8, -8, -8, -8, -8, 48, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 49, -8, -8, -8, -8, -8, -8, -8, -8, 50, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 51, -8, -8, -8, 52, -8, -8, -8, 53, -8, -8, -8, 54, -8, -8, -8, -8, 55, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 56, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 57, -8, -8, -8, -8, -8, -8, -8, -8, -8, 58, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 59, -8, -8, -8, 60, -8, -8, -8, 61, -8, -8, -8, -8, -8, -8, 62, -8, -8, -8, -8, -8, -8, 63, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 65, -8, -8, -8, -8, -8, -8, -8, -8, -8, 66, -8, -8, -8, 67, -8, -8, -8, -8, 68, -8, -8, 69, -8, -8, 70, -8, -8, -8, -8, -8, -8, -8, -8, 71, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 72, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 73, -8, -8, -8, -8, -8, 74, -8, -8, -8, -8, -8, 75, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 76, -8, -8, -8, 90, -8, -8, -8, -8, -8, -8, -8, 77, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 78, -8, -8, -8, 79, -8, -8, -8, 80, -8, -8, -8, -8, -8, -8, 81, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 82, -8, -8, -8, -8, 83, 84, -8, -8, -8, -8, -8, -8, 85, -8, -8, -8, -8, -8, -8, -8, -8, -8, 86, -8, -8, -8, -8, -8, -8, -8, 87, 88, -8, -8, -8, 89, -8, -8, -8, -8, 91, -8, -8, -8, -8, 92, -8, -8, -8, -8, -8, -8, 93, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 94, -8, -8, -8, -8, -8, -8, -8, -8, -8, 95, -8, -8, -8, -8, -8, -8, -8, -8, -8, 96, 97, -8, -8, -8, -8, -8, -8, -8, 98, -8, -8, -8, -8, -8, -8, -8, -8, 99, -8, -8, -8, 100, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 101, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 102, -8, -8, -8, -8, -8, 103, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 104, -8, -8, -8, -8, -8, -8, -8, -8, 105, -8, -8, -8, -8, -8, -8, -8, 106, -8, -8, -8, 107, -8, -8, -8, -8, -8, -8, 108, -8};


// TRibParamter()
// Standard constructor: Initialisation
TRibParameter::TRibParameter() {
	m_lineCount = 0;
	m_isArray = false;
	m_typeID = TYPEID_UNKNOWN;
	m_cstrVector = NULL;
}

// ~TRibParamter()
// Standard destructor: Free memory depending on parameter type
TRibParameter::~TRibParameter() {
	freeValue();

	if ( m_cstrVector ) {
		delete m_cstrVector;
	}
	m_cstrVector = NULL;
}

// TRibParamter
// Copy constructor
TRibParameter::TRibParameter(const TRibParameter &p) {
	m_lineCount = 0;
	m_cstrVector = NULL;
	m_isArray = false;
	m_typeID = TYPEID_UNKNOWN;
	*this = p;
}

// TRibParamter::freeValue
// destroy m_v
void TRibParameter::freeValue() {
	m_vInt.clear();
	m_vFloat.clear();
	m_vString.clear();
}

// operator=
// Assignment, deep copy all values
TRibParameter &TRibParameter::operator=(const TRibParameter &p) {
	if ( &p == this )
		return *this;

	freeValue();

	m_lineCount = p.m_lineCount;

	if ( m_cstrVector )
		delete m_cstrVector;
	m_cstrVector = NULL;

	m_typeID = p.m_typeID;
	m_isArray = p.m_isArray;

	m_vInt = p.m_vInt;
	m_vFloat = p.m_vFloat;
	m_vString = p.m_vString;

	return *this;
}


// getValue()
// returns a pointer to a single value or to the first element of the array m_v
// After called getValue(), do not insert any values into the instance, because
// the pointers may get invalid (esp. string pointers).
// returns NULL if there is no value or not enough memory for string pointers
void *TRibParameter::getValue() {
	// Is there at least one value?
	if ( getCard() == 0 )
		return NULL;

	// return a pointer to the values
	switch ( m_typeID ) {
		case TYPEID_UNKNOWN:
			break;
		case TYPEID_INT:
			return m_vInt.empty() ? NULL : (void *)&m_vInt[0];
		case TYPEID_FLOAT:
			return m_vFloat.empty() ? NULL : (void *)&m_vFloat[0];
		case TYPEID_STRING:
			// returns const char **, a pointer to strings
			// get pointers first
			if ( !m_cstrVector ) {
				m_cstrVector = new std::vector<const char *>;
				if ( !m_cstrVector )
					return NULL;
			}
			size_t i;
			size_t size = m_vString.size();
			m_cstrVector->clear();
			m_cstrVector->resize(size);
			for ( i = 0; i < size; ++i ) {
				(*m_cstrVector)[i] = m_vString[i].c_str();
			}
			// returns char **
			return m_cstrVector->empty() ? NULL : (void *)&(*m_cstrVector)[0];
	}
	return NULL;
}


// getValue()
// returns a pointer to a single value i
// After called getValue(), do not insert any values into the instance, because
// the pointers may get invalid (esp. string pointers).
// returns NULL if there is no value, string is returnd as char * and not char **
void *TRibParameter::getValue(size_t i) const {
	if ( i >= getCard() )
		return NULL;

	switch ( m_typeID ) {
		case TYPEID_UNKNOWN:
			break;
		case TYPEID_INT:
			return (void *)&m_vInt[i];
		case TYPEID_FLOAT:
			return (void *)&m_vFloat[i];
		case TYPEID_STRING:
			// ! returns char * not char **
			return (void *)m_vString[i].c_str();
	}
	return NULL;
}


// getCard()
// returns the number of values stored
size_t TRibParameter::getCard() const {

	// No valid typeID - no value is set
	if ( m_typeID < 0 || m_typeID >= N_TYPEID )
		return 0;

	// vector allocated - size is the cardinality
	switch ( m_typeID ) {
		case TYPEID_UNKNOWN:
			break;
		case TYPEID_INT:
			return m_vInt.size();
		case TYPEID_FLOAT:
			return m_vFloat.size();
		case TYPEID_STRING:
			return m_vString.size();
	}
	return 0;
}


// convertIntToFloat()
// converts all integer values to float values
// returns false if type is not integer or out of memory
bool TRibParameter::convertIntToFloat() {
	if ( m_typeID == TYPEID_FLOAT )
		return true;

	if ( m_typeID != TYPEID_INT )
		return false;

	size_t i;
	size_t size = m_vInt.size();
	m_vFloat.resize(size);
	for ( i = 0; i < size; ++i ) {
		m_vFloat[i]=(RtFloat)m_vInt[i];
	}
	m_vInt.clear();
	m_typeID = TYPEID_FLOAT;
	return true;
}

// convertFloatToInt()
// converts all float values to integer values
// returns false if type is not float or out of memory
bool TRibParameter::convertFloatToInt() {
	if ( m_typeID == TYPEID_INT )
		return true;

	if ( m_typeID != TYPEID_FLOAT )
		return false;

	size_t i;
	size_t size = m_vFloat.size();
	m_vInt.resize(size);
	for ( i = 0; i < size; ++i ) {
		m_vInt[i]=(RtInt)m_vFloat[i];
	}
	m_vFloat.clear();
	m_typeID = TYPEID_INT;
	return true;
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//// Parser


// A global list of tokens
bool TRibParser::m_tokenInitialized = false;
const char *TRibParser::m_tokenset[N_TOKENS];

// Various status codes, sequence is important
const int TRibParser::RIBPARSER_EOF = -1;
const int TRibParser::RIBPARSER_NORMAL_COMMENT = -2;
const int TRibParser::RIBPARSER_STRUCTURED_COMMENT = -3;
const int TRibParser::RIBPARSER_STRING = -4;
const int TRibParser::RIBPARSER_ARRAY_START = -5;
const int TRibParser::RIBPARSER_ARRAY_END = -6;
const int TRibParser::RIBPARSER_NUMBER = -7;
const int TRibParser::RIBPARSER_NOT_A_TOKEN = -8;

// initTokens()
// builds the global list of all possible RIB tokens
void TRibParser::initTokens() {

	// Tokens already initialized?
	if ( m_tokenInitialized ) {
		return;
	}

	m_tokenset[IDX_ERROR_HANDLER] = "ErrorHandler";
	m_tokenset[IDX_DECLARE] = "Declare";
	m_tokenset[IDX_BEGIN] = "Begin";
	m_tokenset[IDX_END] = "End";
	m_tokenset[IDX_FRAME_BEGIN] = "FrameBegin";
	m_tokenset[IDX_FRAME_END] = "FrameEnd";
	m_tokenset[IDX_WORLD_BEGIN] = "WorldBegin";
	m_tokenset[IDX_WORLD_END] = "WorldEnd";
	m_tokenset[IDX_ATTRIBUTE_BEGIN] = "AttributeBegin";
	m_tokenset[IDX_ATTRIBUTE_END] = "AttributeEnd";
	m_tokenset[IDX_TRANSFORM_BEGIN] = "TransformBegin";
	m_tokenset[IDX_TRANSFORM_END] = "TransformEnd";
	m_tokenset[IDX_SOLID_BEGIN] = "SolidBegin";
	m_tokenset[IDX_SOLID_END] = "SolidEnd";
	m_tokenset[IDX_OBJECT_BEGIN] = "ObjectBegin";
	m_tokenset[IDX_OBJECT_END] = "ObjectEnd";
	m_tokenset[IDX_MOTION_BEGIN] = "MotionBegin";
	m_tokenset[IDX_MOTION_END] = "MotionEnd";
	m_tokenset[IDX_FORMAT] = "Format";
	m_tokenset[IDX_FRAME_ASPECT_RATIO] = "FrameAspectRatio";
	m_tokenset[IDX_SCREEN_WINDOW] = "ScreenWindow";
	m_tokenset[IDX_CROP_WINDOW] = "CropWindow";
	m_tokenset[IDX_PROJECTION] = "Projection";
	m_tokenset[IDX_CLIPPING] = "Clipping";
	m_tokenset[IDX_CLIPPING_PLANE] = "ClippingPlane";
	m_tokenset[IDX_DEPTH_OF_FIELD] = "DepthOfField";
	m_tokenset[IDX_SHUTTER] = "Shutter";
	m_tokenset[IDX_PIXEL_VARIANCE] = "PixelVariance";
	m_tokenset[IDX_PIXEL_SAMPLES] = "PixelSamples";
	m_tokenset[IDX_PIXEL_FILTER] = "PixelFilter";
	m_tokenset[IDX_EXPOSURE] = "Exposure";
	m_tokenset[IDX_IMAGER] = "Imager";
	m_tokenset[IDX_QUANTIZE] = "Quantize";
	m_tokenset[IDX_DISPLAY] = "Display";
	m_tokenset[IDX_HIDER] = "Hider";
	m_tokenset[IDX_COLOR_SAMPLES] = "ColorSamples";
	m_tokenset[IDX_RELATIVE_DETAIL] = "RelativeDetail";
	m_tokenset[IDX_OPTION] = "Option";
	m_tokenset[IDX_LIGHT_SOURCE] = "LightSource";
	m_tokenset[IDX_AREA_LIGHT_SOURCE] = "AreaLightSource";
	m_tokenset[IDX_ATTRIBUTE] = "Attribute";
	m_tokenset[IDX_COLOR] = "Color";
	m_tokenset[IDX_OPACITY] = "Opacity";
	m_tokenset[IDX_SURFACE] = "Surface";
	m_tokenset[IDX_ATMOSPHERE] = "Atosphere";
	m_tokenset[IDX_INTERIOR] = "Interior";
	m_tokenset[IDX_EXTERIOR] = "Exterior";
	m_tokenset[IDX_ILLUMINATE] = "Illuminate";
	m_tokenset[IDX_DISPLACEMENT] = "Displacement";
	m_tokenset[IDX_TEXTURE_COORDINATES] = "TextureCoordinates";
	m_tokenset[IDX_SHADING_RATE] = "ShadingRate";
	m_tokenset[IDX_SHADING_INTERPOLATION] = "ShadingInterpolation";
	m_tokenset[IDX_MATTE] = "Matte";
	m_tokenset[IDX_BOUND] = "Bound";
	m_tokenset[IDX_DETAIL] = "Detail";
	m_tokenset[IDX_DETAIL_RANGE] = "DetailRange";
	m_tokenset[IDX_GEOMETRIC_APPROXIMATION] = "GeometricApproximation";
	m_tokenset[IDX_GEOMETRIC_REPRESENTATION] = "GeometricRepresentation";
	m_tokenset[IDX_ORIENTATION] = "Orientation";
	m_tokenset[IDX_REVERSE_ORIENTATION] = "ReverseOrientation";
	m_tokenset[IDX_SIDES] = "Sides";
	m_tokenset[IDX_BASIS] = "Basis";
	m_tokenset[IDX_TRIM_CURVE] = "TrimCurve";
	m_tokenset[IDX_IDENTITY] = "Identity";
	m_tokenset[IDX_TRANSFORM] = "Transform";
	m_tokenset[IDX_CONCAT_TRANSFORM] = "ConcatTransform";
	m_tokenset[IDX_PERSPECTIVE] = "Perspective";
	m_tokenset[IDX_TRANSLATE] = "Translate";
	m_tokenset[IDX_ROTATE] = "Rotate";
	m_tokenset[IDX_SCALE] = "Scale";
	m_tokenset[IDX_SKEW] = "Skew";
	m_tokenset[IDX_DEFORMATION] = "Deion";
	m_tokenset[IDX_COORDINATE_SYSTEM] = "formatCoordinateSystem";
	m_tokenset[IDX_COORD_SYS_TRANSFORM] = "CoordSysTransform";
	m_tokenset[IDX_TRANSFORM_POINTS] = "TransformPoints";
	m_tokenset[IDX_POLYGON] = "Polygon";
	m_tokenset[IDX_GENERAL_POLYGON] = "GeneralPolygon";
	m_tokenset[IDX_POINTS_POLYGONS] = "PointsPolygons";
	m_tokenset[IDX_POINTS_GENERAL_POLYGONS] = "PointsGeneralPolygons";
	m_tokenset[IDX_PATCH] = "Patch";
	m_tokenset[IDX_PATCH_MESH] = "PatchMesh";
	m_tokenset[IDX_NU_PATCH] = "NuPatch";
	m_tokenset[IDX_SUBDIVISION_MESH] = "SubdivisionMesh";
	m_tokenset[IDX_SPHERE] = "Sphere";
	m_tokenset[IDX_CONE] = "Cone";
	m_tokenset[IDX_CYLINDER] = "Cylinder";
	m_tokenset[IDX_HYPERBOLOID] = "Hyperboloid";
	m_tokenset[IDX_PARABOLOID] = "Paraboloid";
	m_tokenset[IDX_DISK] = "Disk";
	m_tokenset[IDX_TORUS] = "Torus";
	m_tokenset[IDX_POINTS] = "Points";
	m_tokenset[IDX_CURVES] = "Curves";
	m_tokenset[IDX_BLOBBY] = "Blobby";
	m_tokenset[IDX_PROCEDURAL] = "Procedural";
	m_tokenset[IDX_PROC_DELAYED_READ_ARCHIVE] = "ProcDelayedReadArchive";
	m_tokenset[IDX_PROC_RUN_PROGRAM] = "ProcRunProgram";
	m_tokenset[IDX_PROC_DYNAMIC_LOAD] = "ProcDynamicLoad";
	m_tokenset[IDX_GEOMETRY] = "Geometry";
	m_tokenset[IDX_OBJECT_INSTANCE] = "ObjectInstance";
	m_tokenset[IDX_MAKE_TEXTURE] = "MakeTexture";
	m_tokenset[IDX_MAKE_BUMP] = "MakeBump";
	m_tokenset[IDX_MAKE_LAT_LONG_ENVIRONMENT] = "MakeLatLongEnvironment";
	m_tokenset[IDX_MAKE_CUBE_FACE_ENVIRONMENT] = "MakeCubeFaceEnvironment";
	m_tokenset[IDX_MAKE_SHADOW] = "MakeShadow";
	m_tokenset[IDX_ARCHIVE_RECORD] = "ArchiveRecord";
	m_tokenset[IDX_READ_ARCHIVE] = "ReadArchive";
	m_tokenset[IDX_GET_CONTEXT] = "GetContext";
	m_tokenset[IDX_CONTEXT] = "Context";
	m_tokenset[IDX_VERSION] = "version";

	m_tokenInitialized = true;
}

// TRibParser()
// standard constructor
TRibParser::TRibParser() {
	m_lineCount = 0;
	m_strFileName = "";
	m_ri = NULL;
	m_ricb = NULL;
	m_fctpArchiveCallback = NULL;
	m_pifStream = NULL;
	m_braketDepth = 0;
	m_code = -1;
	m_defineString = -1;
	m_currentCallId = RIBPARSER_NOT_A_TOKEN;
	m_checkParameters = true;
	initTokens();
	m_lastToken = m_tokenset[IDX_ERROR_HANDLER];
	m_lastTokenId = IDX_ERROR_HANDLER;
	m_n = 0;
	m_tokens = NULL;
	m_params = NULL;
}

// TRibParser()
// constructor used to initialize some members with the given parameters
TRibParser::TRibParser(const char *filename, TRi &ri, TRiCallbackInterface &ricb, RtArchiveCallback callback, int n, RtToken tokens[], RtPointer params[]) {
	m_lineCount = 0;
	m_strFileName = filename ? filename : "";
	m_ri = &ri;
	m_ricb = &ricb;
	m_fctpArchiveCallback = callback;
	m_n = n;
	m_tokens = tokens;
	m_params = params;
	m_pifStream = NULL;
	m_braketDepth = 0;
	m_code = -1;
	m_defineString = -1;
	m_currentCallId = RIBPARSER_NOT_A_TOKEN;
	m_checkParameters = true;
	initTokens();
	m_lastToken = m_tokenset[IDX_ERROR_HANDLER];
	m_lastTokenId = IDX_ERROR_HANDLER;
}


// ~TRibParser()
// destructor, do some cleanup (close files)
TRibParser::~TRibParser() {
	closeStream();
}

// return val RIBPARSER_EOF

// handleBinary()
// Handle binary encoded RIB -
// some code is taken from readfunc.c found in the affine lib
// by Thomas E. Burge
int TRibParser::handleBinary(unsigned char c) {

	assert(c > 0177);

	if ( c < 0220 ) {           // 0200..0217 encoded integers and fixed numbers
		// 0200 + (d*4) + w | <value>
		int w = (0x03 & c) + 1;     // Number of bytes of <value> 1..4
		int d = (0x0c & c) >> 2;    // Number of bytes after the decimal point 0..w
		int i;

		if ( w < d )
		{
			// Error, more bytes after the decimal point than bytes at all
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: More bytes after the decimal point than bytes at all", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			// skip values
			for ( i = 0; i < w; i++ ) {
				*m_pifStream >> c;
			}
			return 0;
		}

		// Read all bytes to an unsigned long (w has 1..4 bytes)
		unsigned long tmp = 0;
		for ( i = 0; i < w; i++ ) {
			if ( m_pifStream->eof() ) {   // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			tmp = tmp << 8;
			tmp |= c;
		}

		i = w*8;
		if  ( tmp & ( 1 << (i-1) )) // value is negative
			tmp |= 0xffffffff << i; // change 0 to 1 in the upper bits

		RtFloat flt = (RtFloat)((double)tmp / (double)(1 << (d * 8)));
		return insertNumber(flt);

	} else if ( c < 0240 ) {    // encoded strings of no more than 15 characters

		// 0220 + w | <ASCII string>, w=[0..15]
		int w = c - 0220;
		m_token.clear();
		m_token.reserve(w+1);
		while ( w-- > 0 ) {
			if ( m_pifStream->eof() ) {   // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			m_token.push_back(c);
		}
		return handleString();

	} else if ( c < 0244 ) {    // encoded strings longer than 15 characters
		// 0240 + l | <length> | <ASCII string>, l=[0..3]
		// Assign l be the number of bytes needed to specify 
		// the length of the string.
		unsigned int l = c - 0240 + 1;

		/* Read all l number of bytes. */
		unsigned long utmp = 0;
		while ( l-- > 0 ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			utmp = utmp << 8;
			utmp |= c;
		}

		m_token.clear();
		m_token.reserve(utmp+1);
		while ( utmp-- > 0 ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			m_token.push_back(c);
		}
		return handleString();

	} else if ( c < 0245 ) {    // encoded single precision IEEE floating point value
		// 0244 | <four bytes>
		// sign bit, 8 bit exponent, 23 bit mantissa

		unsigned long tmp = 0;
		int i;
		for ( i = 0; i < 4; i++ ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			tmp = tmp << 8;
			tmp |= c;
		}
		float flt = *((float *)(void*)&tmp);

		return insertNumber((RtFloat)flt);
	} else if ( c < 0246 ) {    // encoded double precision IEEE floating point value
		// 0245 | <eight bytes>
		// sign bit, 11 bit exponent, 52 bit mantissa

		// NOTE:  Encoded doubles don't appear to be used by anybody.  
		//        But the following code was tested once with a hacked 
		//        binary rib file.  Refer to the test file:
		//        affine/ribdump/dbltest.rib.  Use ribdump, typerib,
		//        or Pixar's catrib to view the file since it is in
		//        binary encoded form. (see affine lib)

		unsigned char *v; // value of float accessed as bytes
		double dbl;
		int i;

		v = (unsigned char*)(void*)&dbl;

		// Read double.
#ifdef LITTLE_ENDIAN         
		for ( i = 7; i > -1; i-- )
#else
		for ( i = 0; i < 8; i++ )
#endif        
		{
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			v[i] = c;
		}

		// Storing data as a double doesn't get you much right 
		// now since it is going to be stored as a 32-bit float
		// anyway.  RtFloat is of type float as of prman 3.6c. (see affine lib)
		return insertNumber((RtFloat)dbl);
	} else if ( c < 0247 ) {    // encoded RI request
		// 0246 | <code>
		if ( m_pifStream->eof() ) {  // EOF is not expected here
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			return 0;
		}
		*m_pifStream >> c;
		if ( m_ribEncode[c] == RIBPARSER_NOT_A_TOKEN ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badtoken: invalid binary token", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		return m_ribEncode[c]; // RIBPARSER_NOT_A_TOKEN if Token was not defined or not found
	} else if ( c < 0310 ) {    // nothing (reserved)
		return RIBPARSER_NORMAL_COMMENT;  // Treat as comment
	} else if ( c < 0314 ) {    // encoded single precision array (length follows)
		int l = c - 0310 + 1;
		int i;
		unsigned long utmp = 0;
		unsigned long tmp = 0;

		while ( l-- > 0 ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			utmp = utmp << 8;
			utmp |= c;
		}

		handleArrayStart();
		while ( utmp-- > 0 ) {
			for ( i = 0; i < 4; i++ ) {
				if ( m_pifStream->eof() ) {  // EOF is not expected here
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
					return 0;
				}
				*m_pifStream >> c;
				tmp = tmp << 8;
				tmp |= c;
			}
			float flt = *((float *)(void*)&tmp);
			insertNumber((RtFloat)flt);
		}
		return handleArrayEnd();
	} else if ( c < 0315 ) {    // define encoded request
		// 0314 | code | <string>
		if ( m_pifStream->eof() ) {  // EOF is not expected here
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			return 0;
		}
		*m_pifStream >> c;
		m_code = c;
		return RIBPARSER_NORMAL_COMMENT; // Treat as comment
	} else if ( c < 0317 ) {    // define encoded string token
		// 0315+w | <token> | string
		int w = c == 0315 ? 1 : 2;
		if ( m_pifStream->eof() ) {  // EOF is not expected here
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			return 0;
		}
		*m_pifStream >> c;
		unsigned long tmp = c;
		if ( w == 2 ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			tmp = tmp << 8;
			tmp |= c;
		}
		m_defineString = tmp;
		return RIBPARSER_NORMAL_COMMENT;
	} else if ( c < 0321 ) {    // interpolate defined string
		// 0317+w | <token> | string
		int w = c == 0317 ? 1 : 2;
		if ( m_pifStream->eof() ) {  // EOF is not expected here
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			return 0;
		}
		*m_pifStream >> c;
		unsigned long tmp = c;
		if ( w == 2 ) {
			if ( m_pifStream->eof() ) {  // EOF is not expected here
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", protocolbotch: EOF is not expected here", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				return 0;
			}
			*m_pifStream >> c;
			tmp = tmp << 8;
			tmp |= c;
		}

		NUM2STRING::const_iterator i = m_stringMap.find(tmp);
		if ( i != m_stringMap.end() ) {
			m_token.assign((*i).second.c_str(), (*i).second.c_str()+(*i).second.length());
			return handleString();
		}

		// Error string not found
		m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badstringtoken: Undefined encoded Stiring token", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		return RIBPARSER_NORMAL_COMMENT;
	}

	// else c >= 0321
	// nothing (reserved)

	return RIBPARSER_NORMAL_COMMENT; // Treat as comment
}

int TRibParser::handleComment(std::vector<char> &token, bool isStructured) {
	// If a comment is inbetween an interface call,
	// it is handled after that call
	token.push_back((char)0);

	TComment cc;
	m_deferedCommentList.push_back(cc);

	TComment &c = m_deferedCommentList[m_deferedCommentList.size()-1];
	c.m_comment = token;
	c.m_isStructured = isStructured;
	c.m_lineCount = m_lineCount;

	return isStructured ? RIBPARSER_STRUCTURED_COMMENT : RIBPARSER_NORMAL_COMMENT;
}

void TRibParser::handleDeferedComments() {
	unsigned int i;
	for ( i=0; i < m_deferedCommentList.size(); ++i ) {
		TComment &c = m_deferedCommentList[i];
		m_ricb->lineNo(c.m_lineCount);
		if ( c.m_isStructured ) {
			m_ri->archiveRecordV(m_ri->RI_STRUCTURE, c.m_comment.empty() ? NULL : &c.m_comment[0]);
			if ( m_fctpArchiveCallback )
				m_fctpArchiveCallback(m_ri, m_ri->RI_STRUCTURE, c.m_comment.empty() ? NULL : &c.m_comment[0]);
		} else {
			m_ri->archiveRecordV(m_ri->RI_COMMENT, c.m_comment.empty() ? NULL : &c.m_comment[0]);
			if ( m_fctpArchiveCallback )
				m_fctpArchiveCallback(m_ri, m_ri->RI_COMMENT, c.m_comment.empty() ? NULL : &c.m_comment[0]);
		}
	}
	m_ricb->lineNo(m_lineCount);
	m_deferedCommentList.clear();
}

int TRibParser::handleString() {
	m_token.push_back((unsigned char)0);
	if ( m_code >= 0 ) {
		if ( m_defineString >= 0 ) {
			// error
			m_defineString = -1;
		}
		// String was a rib call to encode
		RtInt op = findIdentifier();
		m_ribEncode[m_code] = op;
		// Error if m_ribEncode[m_code] == RIBPARSER_NOT_A_TOKEN
		if ( op == RIBPARSER_NOT_A_TOKEN ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badribcode: invalid encoded RIB request code \"%s\"", m_lineCount, m_strFileName.c_str(), &m_token[0], m_ri->RI_NULL);
		}
		m_code = -1;    // Clear
		return RIBPARSER_NORMAL_COMMENT;
	}
	if ( m_defineString >= 0 ) {
		m_stringMap[m_defineString] = &m_token[0];
		m_defineString = -1;
		return RIBPARSER_NORMAL_COMMENT;
	}

	if ( m_braketDepth ) {
		TRibParameter &p = m_parameters.back();
		if ( !p.setString(&m_token[0]) ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Mixed types in array", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	} else {
		TRibParameter p;
		p.lineCount(m_pifStream->lineCount());
		p.setString(&m_token[0]);
		m_parameters.push_back(p);
	}

	return RIBPARSER_STRING;
}

int TRibParser::handleArrayStart() {
	TRibParameter param;
	param.lineCount(m_pifStream->lineCount());
	m_parameters.push_back(param);
	TRibParameter &p = m_parameters.back();
	p.startArray();
	++m_braketDepth;
	return RIBPARSER_ARRAY_START;
}

int TRibParser::handleArrayEnd() {
	--m_braketDepth;
	if ( m_braketDepth < 0 ) {
		m_braketDepth = 0;
		m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Too many closing brakets", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
	}
	return RIBPARSER_ARRAY_END;
}


int TRibParser::insertNumber(RtFloat flt) {
	if ( m_braketDepth ) {
		// Array
		TRibParameter &p = m_parameters.back();
		if ( !p.setFloat(flt) ) {
			// This happens if an array contains number and string values
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Mixed types in array", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	} else {
		// Single value
		TRibParameter p;
		p.lineCount(m_pifStream->lineCount());
		p.setFloat(flt);
		m_parameters.push_back(p);
	}
	return RIBPARSER_NUMBER;
}

int TRibParser::insertNumber(RtInt num) {
	if ( m_braketDepth ) {
		// Array
		TRibParameter &p = m_parameters.back();
		if ( !p.setInt(num) ) {
			// This happens if an array contains number and string values
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Mixed types in array", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	} else {
		// Single value
		TRibParameter p;
		p.lineCount(m_pifStream->lineCount());
		p.setInt(num);
		m_parameters.push_back(p);
	}
	return RIBPARSER_NUMBER;
}

int TRibParser::handleNumber(bool isInteger) {
	m_token.push_back((unsigned char)0);

	if ( isInteger ) {
		long l = ::atol(&m_token[0]);
		return insertNumber((RtInt)l);
	}

	RtFloat f = (RtFloat)::atof(&m_token[0]);
	return insertNumber(f);
}

/*
int TRibParser::findIdentifier() {
	m_token.push_back(0); // Terminate string

	// Until a better token finding algorithm is implemented, I try
	// the last token found first...
	if ( m_lastToken && !strcmp(&m_token[0], m_lastToken) ) {
		return m_lastTokenId;
	}

	int i;
	for ( i = 0; i < N_TOKENS; ++i ) {
		if ( m_tokenset[i] && !strcmp(&m_token[0], m_tokenset[i]) ) {
			m_lastToken = m_tokenset[i];
			m_lastTokenId = i;
			return i;
		}
	}
	return RIBPARSER_NOT_A_TOKEN; // ID not found
}
*/

int TRibParser::findIdentifier() {
	m_token.push_back(0); // Terminate string

	std::vector<char>::iterator it = m_token.begin();
	int tokenState = 0;
	unsigned char c;

	for ( c = *it; c; ) {
		if ( c >= 'a' && c <= 'z' ) {
			tokenState = riStateTab[tokenState][c-(unsigned char)'a'];
		} else if ( c >= 'A' && c <= 'Z' ) {
			tokenState = riStateTab[tokenState][c-(unsigned char)'A'+(unsigned char)'z'-(unsigned char)'a'+1];
		} else return RIBPARSER_NOT_A_TOKEN; // not found
		it++;
		c = *it;
	}

	return riFinalTab[tokenState];
}


bool TRibParser::bindObjectHandle(RtObjectHandle handle, RtInt number) {
	m_mapObjectHandle[number] = handle;
	return true;
}

bool TRibParser::bindObjectHandle(RtObjectHandle handle, const char *name) {
	m_mapObjectStrHandle[name] = handle;
	return true;
}

bool TRibParser::getObjectHandle(RtObjectHandle &handle, RtInt number) {
	NUM2OBJECT::const_iterator i = m_mapObjectHandle.find(number);
	if ( i != m_mapObjectHandle.end() ) {
		handle = (*i).second;
		return true;
	}

	return false;
}

bool TRibParser::getObjectHandle(RtObjectHandle &handle, const char *name) {
	STR2OBJECT::const_iterator i = m_mapObjectStrHandle.find(name);
	if ( i != m_mapObjectStrHandle.end() ) {
		handle = (*i).second;
		return true;
	}

	return false;
}

bool TRibParser::bindLightHandle(RtLightHandle handle, RtInt number) {
	m_mapLightHandle[number] = handle;
	return true;
}

bool TRibParser::bindLightHandle(RtLightHandle handle, const char *handleName) {
	m_mapLightStrHandle[handleName] = handle;
	return true;
}

bool TRibParser::getLightHandle(RtLightHandle &handle, RtInt number) {
	NUM2LIGHT::const_iterator i = m_mapLightHandle.find(number);
	if ( i != m_mapLightHandle.end() ) {
		handle = (*i).second;
		return true;
	}

	return false;
}

bool TRibParser::getLightHandle(RtLightHandle &handle, const char *handleName) {
	STR2LIGHT::const_iterator i = m_mapLightStrHandle.find(handleName);
	if ( i != m_mapLightStrHandle.end() ) {
		handle = (*i).second;
		return true;
	}

	return false;
}

RtInt TRibParser::numVertices(RtInt start, RtInt n) {
	int i;
	for ( i = 0; i < n; ++i ) {
		if ( !strcmp(m_tokenList[i], m_ri->RI_P ) ) {
			TRibParameter &p = m_parameters[start + 2*i + 1];
			return (RtInt)(p.getCard()/3);
		}
		if ( !strcmp(m_tokenList[i], m_ri->RI_PW ) ) {
			TRibParameter &p = m_parameters[start + 2*i + 1];
			return (RtInt)(p.getCard()/4);
		}
		if ( !strcmp(m_tokenList[i], m_ri->RI_PZ ) ) {
			TRibParameter &p = m_parameters[start + 2*i + 1];
			return (RtInt)(p.getCard());
		}
	}

	return 0;
}

RtFilterFunc TRibParser::getFilterFunc(const char *name) const {
	if ( !strcmp(name, "box" ) ) {
		return (RtFilterFunc)&m_ri->boxFilter;
	} else if ( !strcmp(name, "catmull-rom") ) {
		return (RtFilterFunc)&m_ri->catmullRomFilter;
	} else if ( !strcmp(name, "catmullrom") ) { // ??? I have seen this somewhere, maybe wrong syntax, but doesn't matter at all...
		return (RtFilterFunc)&m_ri->catmullRomFilter;
	} else if ( !strcmp(name, "gaussian") ) {
		return (RtFilterFunc)&m_ri->gaussianFilter;
	} else if ( !strcmp(name, "sinc") ) {
		return (RtFilterFunc)&m_ri->sincFilter;
	} else if ( !strcmp(name, "triangle") ) {
		return (RtFilterFunc)&m_ri->triangleFilter;
	}
	return NULL;
}


int TRibParser::getTokenList(size_t start, RtInt vertices, RtInt corners, RtInt facets, RtInt faceVertices, RtInt faceCorners) {
	size_t size = m_parameters.size();
	m_tokenList.clear();
	m_valueList.clear();

	if ( start >= size ) {
		m_tokenList.push_back(NULL);
		m_valueList.push_back(NULL);
		return 0;
	}

	m_tokenList.reserve((size-start)/2);
	m_valueList.reserve((size-start)/2);

	RtInt aClass, aType, aCardinality;

	const char *token = NULL;
	void *value = NULL;
	size_t i;

	int parameterCount = 0;

	for ( i = start; i < size; ++i ) {

		// Find the parameter name
		if ( !m_parameters[i].getString(token) ) {
			// parameter name must be a string
			if ( m_ricb && (m_currentCallId >= 0) )
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
				"Line %ld, File \"%s\", badparamlist: '%s' malformed parameter list, parameter name at position %d is not a string",
				m_parameters[i].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], (int)i, m_ri->RI_NULL);
			continue;
		}

		// Get the value to the parameter, value is always an array, if not convert parameter
		// to an array (try to read parameters until a new string is found - if value is a string
		// and not an array only one value is taken)

		++i;

		if ( i >= size ) {
			// last Token value missing, don't use this parameter
			value = NULL;
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
				"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d, no value found",
				m_parameters[i-1].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)i-1, m_ri->RI_NULL);
			break;
		}

		bool useParameter = true;
		size_t currParam = i;
		m_parameters[currParam].convertIntToFloat(); // if values are integers convert them to floats, else do nothing.

		if ( m_parameters[currParam].typeID() != TYPEID_STRING && !m_parameters[currParam].isArray() ) {
			while ( ++i < size ) {
				if ( m_parameters[i].typeID() == TYPEID_STRING ) {
					break;
				}
				RtFloat v = 0.0;
				if ( !m_parameters[i].getFloat(v) ) {
					m_ricb->handleError(RIE_BUG, RIE_ERROR,
						"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d, couldn't convert value to float, using 0.0",
						m_parameters[i].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)i, m_ri->RI_NULL);
				}
				if ( useParameter && !m_parameters[currParam].setFloat(v) ) {
					m_ricb->handleError(RIE_BUG, RIE_ERROR,
						"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d, couldn't set value to float, using 0.0",
						m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, m_ri->RI_NULL);
					useParameter = false;
				}
			}
			--i;
			// i == start-1 xor m_parameters[i] contains the next parameter name
		}

		value = m_parameters[currParam].getValue();  // Get the value as a pointer

		if ( useParameter && m_checkParameters ) {
			// Test token/value, if OK push to Paramter list, don't use otherwise
			RtInt numComps;
			IndexType numBytes;
			if ( !m_ricb->queryParam(token, vertices, corners, facets, faceVertices, faceCorners, aClass, aType, aCardinality, numComps, numBytes) ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
					"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d has no declaration",
					m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, m_ri->RI_NULL);
				// since there is an unknown type, don't use the parameter
				useParameter = false;
			} else {
				// assert(aCardinality>=1)
				// Check the type
				int simpleType = m_parameters[currParam].typeID();
				size_t size = m_parameters[currParam].getCard();
				switch ( aType ) {
					case TYPE_UNKNOWN: useParameter=false; break;
					case TYPE_BOOLEAN: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_INTEGER: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_FLOAT: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_TOKEN: useParameter=(simpleType==TYPEID_STRING); break;
					case TYPE_COLOR: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_POINT: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_VECTOR: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_NORMAL: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_HPOINT: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_MPOINT: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_MATRIX: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_BASIS: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_BOUND: useParameter=(simpleType==TYPEID_FLOAT); break;
					case TYPE_STRING: useParameter=(simpleType==TYPEID_STRING); break;
					case TYPE_POINTER: useParameter=false; break;
					case TYPE_VOID: useParameter=false; break;
					case TYPE_FILTERFUNC: useParameter=false; break;
					case TYPE_ERRORHANDLER: useParameter=false; break;
					case TYPE_PROCSUBDIVFUNC: useParameter=false; break;
					case TYPE_PROCFREEFUNC: useParameter=false; break;
					case TYPE_ARCHIVECALLBACK: useParameter=false; break;
					case TYPE_OBJECTHANDLE: useParameter=false; break;
					case TYPE_LIGHTHANDLE: useParameter=false; break;
					case TYPE_CONTEXTHANDLE: useParameter=false; break;
				}
				if ( !useParameter ) {
					if ( aType == 0 )
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
							"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d not declared or inline syntax error",
							m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, m_ri->RI_NULL);
					else
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
							"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d type mismatch",
							m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, m_ri->RI_NULL);
				} else {
					// Check the class/size
					if ( size < (size_t)numComps ) {
						useParameter=false;
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR,
							"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d number of values (%d) less then expected (%d)",
							m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, (int)size, (int)numComps, m_ri->RI_NULL);
					}
					if ( size > (size_t)numComps ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING,
							"Line %ld, File \"%s\", badparamlist: '%s', parameter name '%s' at position %d number of values (%d) more then expected (%d), values at end are ignored",
							m_parameters[currParam].lineCount(), m_strFileName.c_str(), m_tokenset[m_currentCallId], token, (int)currParam, (int)size, (int)numComps, m_ri->RI_NULL);
					}
				}
			}
		}

		if ( useParameter ) {
			++parameterCount;
			m_tokenList.push_back(token);
			m_valueList.push_back(value);
		}
	}

	if ( parameterCount == 0 ) {
		m_tokenList.push_back(NULL);
		m_valueList.push_back(NULL);
	}
	return parameterCount;
}


// nextToken()
// The scanner, reads from m_pifStream, returns the token (IDX_...), or
// RIBPARSER_EOF for EOF or other negative values for tokens like numbers and strings
RtInt TRibParser::nextToken() {
	int state = 0;          // the state of the scanner (switch)
	// bool binary = false;    // currently handling binary data
	unsigned char c;        // the character read
	bool mask,              // mask the next character in the string (\ is found) 
		loop;               // will be false if EOF
	char tmp;               // used to evaluate an 'octal' (\xxx) for a string
	int tokenState = 0;     // State variable to identify token

	m_token.clear();        // clear the current

	loop = !m_pifStream->eof(); // stop if EOF

	// read the token from m_pifStream
	while ( loop ) {
		if ( m_pifStream->eof() ) {
			// EOF: finish last request
			c = '\n';
			loop = false;
		} else {
			*m_pifStream >> c;
			if ( c == '\r' )
				continue;
			if ( c == 0 ) {
				// EOF: finish last request
				c = '\n';
				loop = false;
			}
		}

		if ( c == '#' && state != 0 && state != 6 && state != 7 && state != 8 && state != 9 && state != 10 && state != 11 && state != 12 ) {
			// 'inline' comment
			{
				std::vector<char> tempToken;
				bool startToken = true;
				bool isStructured = false;
				while ( !m_pifStream->eof() ) {
					*m_pifStream >> c;
					if ( startToken ) {
						isStructured = (c == '#');
						startToken = false;
						continue;
					}
					if ( c == '\r' )
						continue;
					if ( c == '\n' ) {
						// end of comment
						handleComment(tempToken, isStructured);
						break;
					}
					tempToken.push_back(c);
				}
			}

			if ( m_pifStream->eof() ) {
				// EOF: End of comment
				c = '\n';
				loop = false;
			}
		}

		// handle the c read
		switch ( state ) {
		case 0:
			if ( isspace(c) )   // skip whitespace
				continue;
			if ( c > 127 ) {    // handle a binary value
				int rval = handleBinary(c);
				if ( rval == RIBPARSER_NORMAL_COMMENT ) {
					// Error, but don't care
					continue;
				}
				return rval;
			}
			if ( c == '#' ) {   // a comment (maybe structured comment)
				state = 6;
				continue;
			}
			if ( c == '\"' ) {  // a string
				mask = false;
				state = 8;
				continue;
			}
			if ( c == '[' )     // an array
				return handleArrayStart();
			if ( c == ']' )     // end of an array
				return handleArrayEnd();

			if ( c == '-' || c == '+' ) {   // a number
				state = 2;
				m_token.push_back(c);
				continue;
			}
			if ( c >= '0' && c <= '9' ) {   // a number
				state = 2;
				m_token.push_back(c);
				continue;
			}
			if ( c == '.' ) {               // a number
				state = 3;
				m_token.push_back(c);
				continue;
			}
			if ( c >= 'a' && c <= 'z' ) {   // a RIB token
				state = 1;
				m_token.push_back(c);
				tokenState = riStateTab[tokenState][c-(unsigned char)'a'];
				continue;
			}
			if ( c >= 'A' && c <= 'Z' ) {   // a RIB token
				state = 1;
				m_token.push_back(c);
				tokenState = riStateTab[tokenState][c-(unsigned char)'A'+(unsigned char)'z'-(unsigned char)'a'+1];
				continue;
			}
			// unknown c, treat as whitespace but warn
			if ( m_ricb )
				m_ricb->handleError(RIE_SYNTAX, RIE_WARNING, "Line %ld, File \"%s\": Invalid character found '%c', treated as whitespace", m_lineCount, m_strFileName.c_str(), c, m_ri->RI_NULL);
			break;

		case 1: // Identifier
			{
				if ( c >= 'a' && c <= 'z' ) {
					m_token.push_back(c);
					tokenState = riStateTab[tokenState][c-(unsigned char)'a'];
					continue;
				}
				if ( c >= 'A' && c <= 'Z' ) {
					m_token.push_back(c);
					tokenState = riStateTab[tokenState][c-(unsigned char)'A'+(unsigned char)'z'-(unsigned char)'a'+1];
					continue;
				}

				m_pifStream->putback(c);
				// return findIdentifier();

				m_token.push_back(0); // Terminate string
				return riFinalTab[tokenState];
			}
		case 2: // Number (left of a decimal point)
			if ( c >= '0' && c <= '9' ) {
				m_token.push_back(c);
				continue;
			}
			if ( c == '.' ) {
				state = 3;
				m_token.push_back(c);
				continue;
			}
			if ( c == 'E' || c == 'e' ) {
				state = 4;
				m_token.push_back(c);
				continue;
			}
			m_pifStream->putback(c);
			return handleNumber(true);

		case 3: // Number (right of a decimal point)
			if ( c >= '0' && c <= '9' ) {
				m_token.push_back(c);
				continue;
			}
			if ( c == 'E' || c == 'e' ) {
				state = 4;
				m_token.push_back(c);
				continue;
			}
			m_pifStream->putback(c);
			return handleNumber(false);

		case 4: // Number (exponent)
			if ( c == '+' || c == '-' ) {
				state = 5;
				m_token.push_back(c);
				continue;
			}
			if ( c >= '0' && c <= '9' ) {
				state = 5;
				m_token.push_back(c);
				continue;
			}
			m_pifStream->putback(c);
			return handleNumber(false);

		case 5: // Number (exponent)
			if ( c >= '0' && c <= '9' ) {
				m_token.push_back(c);
				continue;
			}
			m_pifStream->putback(c);
			return handleNumber(false);

		case 6: // comment after first '#'
			if ( c == '#' ) {
				state = 7;
				continue;
			}
			if ( c == '\n' ) {
				return handleComment(m_token, false);
			}
			m_token.push_back(c);
			state = 10;
			break;

		case 7: // structured comment
			if ( c == '\n' ) {
				return handleComment(m_token, true);
			}
			m_token.push_back(c);
			break;

		case 8: // string
			if ( c == '\\' ) {
				state = 9;
				continue;
			}
			if ( c == '\r' || c == '\n' ) {
				// error \n in string
				return handleString();
			}
			if ( c == '\"' ) {
				// End of string
				return handleString();
			}
			m_token.push_back(c);
			break;

		case 9: // string ( \. )
			state = 8;
			if ( c == '\n' ) {
				continue;
			}
			if ( c == 'n' ) {
				m_token.push_back('\n');
				continue;
			}
			if ( c == 'r' ) {
				m_token.push_back('\r');
				continue;
			}
			if ( c == 't' ) {
				m_token.push_back('\t');
				continue;
			}
			if ( c == 'b' ) {
				m_token.push_back('\b');
				continue;
			}
			if ( c == 'f' ) {
				m_token.push_back('\f');
				continue;
			}
			if ( c == '\\' ) {
				m_token.push_back('\\');
				continue;
			}
			if ( c == '"' ) {
				m_token.push_back('"');
				continue;
			}
			if ( c >= '0' && c <= '7' ) {
				tmp = c-'0';
				state = 11;
				continue;
			}
			m_token.push_back(c);
			break;

		case 10: // comment
			if ( c == '\n' ) {
				return handleComment(m_token, false);
			}
			m_token.push_back(c);
			break;

		case 11: // Octal 2 in string
			if ( c >= '0' && c <= '7' ) {
				tmp <<= 4;
				tmp |= c-'0';
				state = 12;
				continue;
			} else {
				m_pifStream->putback(c);
				m_token.push_back(tmp);
				state = 8;
			}
			break;

		case 12: // Octal 3 in string
			if ( c >= '0' && c <= '7' ) {
				tmp <<= 4;
				tmp |= c-'0';
			} else {
				m_pifStream->putback(c);
			}
			m_token.push_back(tmp);
			state = 8;
			break;

		default: // This is never reached
			if ( m_ricb )
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\": Invalid internal parser state %d in \"RtInt TRibParser::nextToken()\"", m_lineCount, m_strFileName.c_str(), state, m_ri->RI_NULL);
			return 0;
		}
	}

	return RIBPARSER_EOF;
}


void TRibParser::handleCall(RtInt callId) {
	if ( !m_ri ) {
		// No renderer available
		return;
	}

	if ( !m_ricb ) {
		// No callbacks available
		return;
	}

	if ( callId < 0 || callId >= N_TOKENS ) {
		// not a valid request number
		m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\": Invalid internal token number %d in \"RtInt TRibParser::handleCall(RtInt callId)\"", m_lineCount, m_strFileName.c_str(), (int)callId, m_ri->RI_NULL);
		return;
	}

	// Handles a RIB request for callID, m_parameters holds the
	// parameter list for the request
	// There is some error checking done here, additional checking is done by
	// the framework to avoid double checking

	m_currentCallId = callId;

	switch ( callId ) {

	case IDX_ERROR_HANDLER:
		// ErrorHandler handlername
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *handlerName;
			if ( p0.getString(handlerName) ) {
				if ( !strcmp(handlerName, m_ri->RI_ABORT) ) {
					m_ri->errorHandler(m_ri->errorAbort);
				} else if ( !strcmp(handlerName, m_ri->RI_PRINT) ) {
					m_ri->errorHandler(m_ri->errorPrint);
				} else if ( !strcmp(handlerName, m_ri->RI_IGNORE) ) {
					m_ri->errorHandler(m_ri->errorIgnore);
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: Handler \"%s\" in ErrorHandler is unknown", p0.lineCount(), m_strFileName.c_str(), handlerName, m_ri->RI_NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: First argument in ErrorHandler is not a string", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: To many arguments in ErrorHandler, additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			// No Parameters
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: Argument (the error handler string) in ErrorHandler is missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DECLARE:
		// Declare name
		// Declare name declaration
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name = NULL;
			if ( !p0.getString(name) ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: First argument in Declare is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			const char *declaration = NULL;
			if ( m_parameters.size() > 1 ) {
				TRibParameter &p1 = m_parameters[1];
				if ( !p1.getString(declaration) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: Second argument in Declare is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					break;
				}
			}
			m_ri->declare(name, declaration);
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Declare' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			// No Parameters
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: Arguments (name declaration) in Declare is missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_BEGIN:
		// Begin
		// Begin has no RIB binding
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'Begin' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_END:
		// End
		// End has no RIB binding
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'End' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_FRAME_BEGIN:
		// FrameBegin frameno
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtInt number;
			if ( p0.getInt(number) ) {
				m_ri->frameBegin(number);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'FrameBegin' the type of the frame number is not numeric, using 0 instead", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				m_ri->frameBegin(0);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'FrameBegin' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'FrameBegin' is called without frame number, using 0 instead", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			m_ri->frameBegin(0);
		}
		break;

	case IDX_FRAME_END:
		// FrameEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'FrameEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->frameEnd();
		break;

	case IDX_WORLD_BEGIN:
		// WorldBegin
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'WorldBegin' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->worldBegin();
		break;

	case IDX_WORLD_END:
		// WorldEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'WorldEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->worldEnd();
		break;

	case IDX_ATTRIBUTE_BEGIN:
		// AttributeBegin
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'AttributeBegin' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->attributeBegin();
		break;

	case IDX_ATTRIBUTE_END:
		// AttributeEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'AttributeEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->attributeEnd();
		break;

	case IDX_TRANSFORM_BEGIN:
		// TransformBegin
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'TransformBegin' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->transformBegin();
		break;

	case IDX_TRANSFORM_END:
		// TransformEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'TransformEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->transformEnd();
		break;

	case IDX_SOLID_BEGIN:
		// SolidBegin solidtype
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *type;
			if ( p0.getString(type) ) {
				m_ri->solidBegin(type);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'SolidBegin' the name of the solid is not a string, using \"solid\" instead", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				m_ri->solidBegin("solid");
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'SolidBegin' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'SolidBegin' the name of the solid is not specified, using \"solid\" instead", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			m_ri->solidBegin("primitive");
		}
		break;

	case IDX_SOLID_END:
		// SolidEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'SolidEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->solidEnd();
		break;

	case IDX_OBJECT_BEGIN:
		// ObjectBegin number
		// ObjectBegin name (added)
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtInt number;
			const char *name;
			if ( p0.getInt(number) ) {
				RtObjectHandle handle = m_ri->objectBegin();
				bindObjectHandle(handle, number);
			} else if ( p0.getString(name) ) {
				RtObjectHandle handle = m_ri->objectBegin();
				bindObjectHandle(handle, name);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectBegin' the type of the object number not numeric or name, using 0, this can lead further errors", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				RtObjectHandle handle = m_ri->objectBegin();
				bindObjectHandle(handle, 0);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ObjectBegin' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectBegin' the object number is missing, using 0, this may lead to further errors", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			RtObjectHandle handle = m_ri->objectBegin();
			bindObjectHandle(handle, 0);
		}
		break;

	case IDX_OBJECT_END:
		// ObjectEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ObjectEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->objectEnd();
		break;

	case IDX_MOTION_BEGIN:
		// MotionBegin [ v1 v2 ... vn ]
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			size_t number = p0.getCard();
			p0.convertIntToFloat();
			if ( p0.isArray() && p0.typeID() == TYPEID_FLOAT ) {
				m_ri->motionBeginV((RtInt)number, (RtFloat *)p0.getValue());
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MotionBegin' there is no float array (bad type), using [ 0 ], this leads further errors", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				RtFloat valarray[1] = {0.0};
				m_ri->motionBeginV(1, valarray);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'MotionBegin' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MotionBegin' there is a float array missing, using [ 0 ], this may lead to further errors", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			RtFloat valarray[1] = {0.0};
			m_ri->motionBeginV(1, valarray);
		}
		break;

	case IDX_MOTION_END:
		// MotionEnd
		if ( m_parameters.size() != 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'MotionEnd' has additional parameters, they are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		m_ri->motionEnd();
		break;

	case IDX_FORMAT:
		// Format [ xres yres pixelaspect ] (added)
		// Format xres yres pixelaspect
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' argument 1 [ xres yres pixelaspect ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' must have (an array of) 3 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->format((RtInt)pv[0], (RtInt)pv[1], pv[2]);
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Format' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			RtInt xres, yres;
			RtFloat pixelaspect;
			bool b0 = p0.getInt(xres), b1 = p1.getInt(yres), b2 = p2.getFloat(pixelaspect);
			if ( b0 && b1 && b2 ) {
				m_ri->format(xres, yres, pixelaspect);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' argument 1 (xres) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' argument 2 (yres) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' argument 3 (pixelaspect) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Format' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Format' arguments (xres, yres, pixelaspect) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_FRAME_ASPECT_RATIO:
		// FrameAspectRatio ratio
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat aspect;
			if ( p0.getFloat(aspect) ) {
				m_ri->frameAspectRatio(aspect);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'FrameAspectRatio' argument 1 aspect is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'FrameAspectRatio' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'FrameAspectRatio' argument (aspect) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SCREEN_WINDOW:
		// ScreenWindow [ left right bottom top ]
		// ScreenWindow left right bottom top
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' argument 1 [ left right bottom top ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' must have (an array of) 4 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->screenWindow(pv[0], pv[1], pv[2], pv[3]);
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ScreenWindow' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 4 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			RtFloat left, right, bottom, top;
			bool b0 = p0.getFloat(left), b1 = p1.getFloat(right), b2 = p2.getFloat(bottom), b3 = p3.getFloat(top);
			if ( b0 && b1 && b2 && b3 ) {
				m_ri->screenWindow(left, right, bottom, top);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' argument 1 (left) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' argument 2 (right) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' argument 3 (bottom) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' argument 4 (top) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ScreenWindow' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ScreenWindow' arguments (left, right, bottom, top) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_CROP_WINDOW:
		// CropWindow [ xmin xmax ymin ymax ] (added)
		// CropWindow xmin xmax ymin ymax
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' argument 1 [ xmin xmax ymin ymax ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' must have (an array of) 4 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->cropWindow(pv[0], pv[1], pv[2], pv[3]);
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'CropWindow' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 4 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			RtFloat xmin, xmax, ymin, ymax;
			bool b0 = p0.getFloat(xmin), b1 = p1.getFloat(xmax), b2 = p2.getFloat(ymin), b3 = p3.getFloat(ymax);
			if ( b0 && b1 && b2 && b3 ) {
				m_ri->cropWindow(xmin, xmax, ymin, ymax);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' argument 1 (xmin) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' argument 2 (xmax) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' argument 3 (ymin) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' argument 4 (ymax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'CropWindow' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CropWindow' (xmin, ymin, ymax, ymin) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PROJECTION: {
		// Projection type <paramlist>
		const char *name = m_ri->RI_ORTHOGRAPHIC;
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 ) {
					m_ri->projectionV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ri->projectionV(name, 0, NULL, NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Projection' projection type is not a string, taking orthographic projection", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				m_ri->projectionV(name, 0, NULL, NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Projection' argument (projection) missing, taking orthographic projection", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			m_ri->projectionV(name, 0, NULL, NULL);
		}
		break;
	}

	case IDX_CLIPPING:
		// Clipping [ near far ] (added)
		// Clipping near far
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Clipping' argument 1 [ near far ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Clipping' must have (an array of) 2 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->clipping(pv[0], pv[1]);
			if ( p0.getCard() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Clipping' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtFloat hither, yon;
			bool b0 = p0.getFloat(hither), b1 = p1.getFloat(yon);
			if ( b0 && b1 ) {
				m_ri->clipping(hither, yon);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Clipping' argument 1 (hither) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Clipping' argument 2 (yonder) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Clipping' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Clipping' arguments (hither, yonder) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_CLIPPING_PLANE:
		// ClippingPlane [ x y z nx ny nz ] (added)
		// ClippingPlane x y z nx ny nz
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 1 [ x y z nx ny nz ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' must have (an array of) 6 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->clippingPlane(pv[0], pv[1], pv[2], pv[3], pv[4], pv[5]);
			if ( p0.getCard() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ClippingPlane' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 6 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			RtFloat x, y, z, nx, ny, nz;
			bool b0=p0.getFloat(x), b1=p1.getFloat(y), b2=p2.getFloat(z), b3=p3.getFloat(nx), b4=p4.getFloat(ny), b5=p5.getFloat(nz);
			if ( b0 && b1 && b2 && b3 && b4 && b5 ) {
				m_ri->clippingPlane(x, y, z, nx, ny, nz);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 1 (x) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 2 (y) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 3 (z) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 4 (nx) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 5 (ny) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' argument 6 (nz) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ClippingPlane' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ClippingPlane' arguments (x, y, z, nx, ny, nz) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DEPTH_OF_FIELD:
		// DepthOfField [ fstop focallength focaldistance ] (added)
		// DepthOfField fstop focallength focaldistance
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthOfField' argument 1 [ fstop focallength focaldistance ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthOfField' must have (an array of) 3 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->depthOfField(pv[0], pv[1], pv[2]);
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'DepthOfField' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			RtFloat fstop, focallength, focaldistance;
			bool b0=p0.getFloat(fstop), b1=p1.getFloat(focallength), b2=p2.getFloat(focaldistance);
			if ( b0 && b1 && b2 ) {
				m_ri->depthOfField(fstop, focallength, focaldistance);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthofField' argument 1 (fstop) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthofField' argument 2 (focallength) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthofField' argument 3 (focaldistance) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'DepthOfField' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() == 0 ) {
			m_ri->depthOfField(m_ri->RI_INFINITY, (RtFloat)0.0, (RtFloat)0.0);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DepthOfField' arguments (fstop, focallength, focaldistance) missing, also possible are 0 arguments", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SHUTTER:
		// Shutter [ smin smax ] (added)
		// Shutter smin smax
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Shutter' argument 1 [ smin smax ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Shutter' must have (an array of) 2 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->shutter(pv[0], pv[1]);
			if ( p0.getCard() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Shutter' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtFloat smin, smax;
			bool b0 = p0.getFloat(smin), b1 = p1.getFloat(smax);
			if ( b0 && b1 ) {
				m_ri->shutter(smin, smax);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Shutter' argument 1 (smin) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Shutter' argument 2 (smax) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Shutter' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Shutter' arguments (smin, smax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PIXEL_VARIANCE:
		// PixelVariance variation
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat variation;
			if ( p0.getFloat(variation) ) {
				m_ri->pixelVariance(variation);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelVariance' argument (variation) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'PixelVariance' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelVariance' argument (variation) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PIXEL_SAMPLES:
		// PixelSamples [ xsamples ysamples ] (added)
		// PixelSamples xsamples ysamples
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelSamples' argument 1 [ xsamples ysamples ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelSamples' must have (an array of) 2 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->pixelSamples(pv[0], pv[1]);
			if ( p0.getCard() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'PixelSamples' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtFloat xsamples, ysamples;
			bool b0 = p0.getFloat(xsamples), b1 = p1.getFloat(ysamples);
			if ( b0 && b1 ) {
				m_ri->pixelSamples(xsamples, ysamples);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelSamples' argument 1 (xsamples) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelSamples' argument 2 (ysamples) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'PixelSamples' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelSamples' argument (xsamples, ysamples) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PIXEL_FILTER:
		// PixelFilter functionName xwidth ywidth
		if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			const char *functionName;
			RtFloat xwidth, ywidth;
			bool b0 = p0.getString(functionName), b1 = p1.getFloat(xwidth), b2 = p2.getFloat(ywidth);
			if ( b0 && b1 && b2 ) {
				RtFilterFunc func = getFilterFunc(functionName);
				if ( !func ) {
					func = (RtFilterFunc)&m_ri->boxFilter;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelFilter' argument 1 (filtername=\"%s\") is not a function name, using \"box\"", p0.lineCount(), m_strFileName.c_str(), functionName, m_ri->RI_NULL);
				}
				m_ri->pixelFilter(func, xwidth, ywidth);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelFilter' argument 1 (filtername) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelFilter' argument 2 (xwidth) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelFilter' argument 3 (ywidth) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'PixelFilter' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PixelFilter' argument (functionName, xwidth, ywidth) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_EXPOSURE: {
		// Exposure [ gain gamma ] (added)
		// Exposure gain gamma
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exposure' argument 1 [ gain gamma ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exposure' must have (an array of) 2 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->exposure(pv[0], pv[1]);
			if ( p0.getCard() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Exposure' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtFloat gain, gamma;
			bool b0 = p0.getFloat(gain), b1 = p1.getFloat(gamma);
			if ( b0 && b1 ) {
				m_ri->exposure(gain, gamma);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exposure' argument 1 (gain) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exposure' argument 2 (gamma) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Exposure' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exposure' arguments (gain, gamma) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;
					   }

	case IDX_IMAGER:
		// IMAGER type <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name = "";
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 ) {
					m_ri->imagerV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ri->imagerV(name, 0, NULL, NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Imager' imager type is not a string, request ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Imager' no imager specified, request ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_QUANTIZE:
		// Quantize type one qmin qmax amplifier
		if ( m_parameters.size() >= 5 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			const char *type;
			RtInt one, qmin, qmax;
			RtFloat amplifier;
			bool b0=p0.getString(type), b1=p1.getInt(one), b2=p2.getInt(qmin), b3=p3.getInt(qmax), b4=p4.getFloat(amplifier);
			if ( b0 && b1 && b2 && b3 && b4 ) {
				m_ri->quantize(type, one, qmin, qmax, amplifier);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' argument 2 (one) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' argument 3 (qmin) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' argument 4 (qmax) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' argument 5 (amplifier) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 5 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Quantize' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Quantize' arguments (type, one, qmin, qmax, amplifier) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DISPLAY:
		// Display name type mode <paramlist>
		if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			const char *name, *type, *mode;
			bool b0=p0.getString(name), b1=p1.getString(type), b2=p2.getString(mode);
			if ( b0 && b1 && b2 ) {
				TParameterClasses p;
				int n = getTokenList(3, p);
				if ( n > 0 )
					m_ri->displayV(name, type, mode, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->displayV(name, type, mode, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Display' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Display' argument 2 (type) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Display' argument 3 (mode) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Display' arguments (name, type, mode, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_HIDER:
		// Hider name <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->hiderV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->hiderV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hider' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hider' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_COLOR_SAMPLES:
		// ColorSamples nRGB RGBn
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			p0.convertIntToFloat();
			p1.convertIntToFloat();
			void *v1 = p0.getValue();
			void *v2 = p1.getValue();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 1 (nRGB) are not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 1 (nRGB) not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( p1.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 2 (RGBn) are not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p1.isArray() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 2 (RGBn) not an array", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( p0.getCard() != p1.getCard() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 1 (nRGB) and 2 (RGBn) have not the same size", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !v1 ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 1 (nRGB) could no be extracted", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !v2 ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' argument 2 (RGBn) could no be extracted", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			m_ri->colorSamples((RtInt)p0.getCard(), (RtFloat *)v1, (RtFloat *)v2);
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ColorSamples' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ColorSamples' arguments (nRGB, RGBn) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_RELATIVE_DETAIL:
		// RelativeDetail relativedetail
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat relativedetail;
			if ( p0.getFloat(relativedetail) ) {
				m_ri->relativeDetail(relativedetail);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'RelativeDetail' argument 1 (relativedetail) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'RelativeDetail' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'RelativeDetail' argument (relativedetail) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_OPTION:
		// option name <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->optionV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->optionV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Option' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Option' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_LIGHT_SOURCE:
		// LightSource name lightnumber <paramlist>
		// LightSource name lightname <paramlist>
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtInt number;
			const char *name;
			const char *lightname=NULL;
			bool b0=p0.getString(name);
			bool b1=p1.getInt(number);
			bool b2=false;
			if ( !b1 ) {
				b2=p1.getString(lightname);
			}
			if ( b0 && (b1||b2) ) {
				TParameterClasses p;
				int n = getTokenList(2, p);
				if ( n >= 0 ) {
					RtLightHandle light = NULL;
					if ( n > 0 )
						light = m_ri->lightSourceV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
					else
						light = m_ri->lightSourceV(name, 0, NULL, NULL);
					if ( b1 ) {
						if ( !bindLightHandle(light, number) ) {
							// Internal Error
							m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'LightSource' argument 2 (lighthandle) cannot bind lighthandle", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
						}
					} else {
						// b2 string as Lighthandle
						if ( !bindLightHandle(light, lightname) ) {
							// Internal Error
							m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'LightSource' argument 2 (lighthandle) cannot bind lighthandle", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
						}
					}
				}
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'LightSource' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 && !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'LightSource' argument 2 (lightnumber) is not numeric or a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'LightSource' arguments (name, lightnumber, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_AREA_LIGHT_SOURCE:
		// AreaLightSource name lightnumber <paramlist>
		// AreaLightSource name lightname <paramlist>
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			RtInt number;
			const char *name;
			const char *lightname = NULL;
			bool b0=p0.getString(name), b1=p1.getInt(number);
			bool b2 = false;
			if ( !b1 ) {
				b2 = p1.getString(lightname);
			}
			if ( b0 && (b1 || b2) ) {
				TParameterClasses p;
				int n = getTokenList(2, p);
				if ( n >= 0 ) {
					RtLightHandle light = NULL;
					if ( n > 0 )
						light = m_ri->areaLightSourceV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
					else
						light = m_ri->areaLightSourceV(name, 0, NULL, NULL);
					if ( b1 ) {
						if ( !bindLightHandle(light, number) ) {
							// Internal Error
							m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'AreaLightSource' argument 2 (lighthandle) cannot bind lighthandle", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
						}
					} else {
						if ( !bindLightHandle(light, lightname) ) {
							// Internal Error
							m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'AreaLightSource' argument 2 (lighthandle) cannot bind lighthandle", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
						}
					}
				}
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'AreaLightSource' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 && !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'AreaLightSource' argument 2 (lightnumber) is not numeric or a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'AreaLightSource' arguments (name, lightnumber, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ATTRIBUTE:
		// Attribute name <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->attributeV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->attributeV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Attribute' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Attribute' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_COLOR:
		// Color [ colorarray ]
		// Color colorarray
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			if ( p0.isArray() ) {
				p0.convertIntToFloat();
				if ( p0.typeID() == TYPEID_FLOAT ) {
					m_ri->color((RtColor)p0.getValue());
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Color' argument 1 (color) are not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				break;
			}
		}
		
		if ( m_parameters.size() > 0 ) {
			size_t size = m_parameters.size();
			std::vector<RtFloat> color;
			color.reserve(size);
			size_t i;
			RtFloat fval;
			for ( i = 0; i < size; ++i ) {
				if ( m_parameters[i].getFloat(fval) ) {
					color.push_back(fval);
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Color' parameter %d (color) is not numeric", m_parameters[i].lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
				}
			}
			// 2DO test if the number of color components is correct
			m_ri->color((RtColor)&color[0]);
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Color' missing parameters", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_OPACITY:
		// Opacity [ opacityarray ]
		// Opacity opacityarray
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.isArray() ) {
				if ( p0.typeID() == TYPEID_FLOAT ) {
					m_ri->opacity((RtColor)p0.getValue());
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Opacity' argument 1 (opacity) are not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				break;
			}
		}
		
		if ( m_parameters.size() > 0 ) {
			size_t size = m_parameters.size();
			std::vector<RtFloat> opacity;
			opacity.reserve(size);
			size_t i;
			RtFloat fval;
			for ( i = 0; i < size; ++i ) {
				if ( m_parameters[i].getFloat(fval) ) {
					opacity.push_back(fval);
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Opacity' parameter %d (opacity) is not numeric", m_parameters[i].lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
				}
			}
			m_ri->opacity((RtColor)&opacity[0]);
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Opacity' missing parameters", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SURFACE:
		// Surface name <parameterlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->surfaceV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->surfaceV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Surface' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Surface' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ATMOSPHERE:
		// Atmosphere name <parameterlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->atmosphereV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->atmosphereV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Atmosphere' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hider' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_INTERIOR:
		// Interior name <parameterlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->interiorV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->interiorV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Interior' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Interior' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_EXTERIOR:
		// Exterior name <parameterlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->exteriorV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->exteriorV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Exterior' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hider' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ILLUMINATE:
		// Illuminate [ lightnumber onoff ] (added)
		// Illuminate lightnumber onoff
		// Illuminate lightname onoff
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertFloatToInt();
			if ( p0.typeID() != TYPEID_INT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Illuminate' argument 1 [ lightnumber onoff ] is not an integer", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Illuminate' must have (an array of) 2 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtInt *pv = (RtInt *)p0.getValue();
			RtLightHandle light;

			if ( getLightHandle(light, pv[0]) ) {
				m_ri->illuminate(light, pv[1] ? 1 : 0);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badhandle: 'Illuminate' argument 1 (lightnumber=%d) is not a valid", p0.lineCount(), m_strFileName.c_str(), pv[0], m_ri->RI_NULL);
			}

			if ( p0.getCard() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Illuminate' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			const char *lightname = NULL;
			RtInt number;
			RtInt onoff;
			RtLightHandle light;
			bool b0 = p0.getInt(number), b1 = p1.getInt(onoff);
			bool b2 = false;
			if ( !b0 ) {
				b2 = p0.getString(lightname);
			}
			if ( (b0 || b2) && b1 ) {
				if ( b0 ) {
					if ( getLightHandle(light, number) ) {
						m_ri->illuminate(light, onoff ? 1 : 0);
					} else {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badhandle: 'Illuminate' argument 1 (lightnumber=%d) is not a valid", p0.lineCount(), m_strFileName.c_str(), number, m_ri->RI_NULL);
					}
				} else {
					if ( getLightHandle(light, lightname) ) {
						m_ri->illuminate(light, onoff ? 1 : 0);
					} else {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badhandle: 'Illuminate' argument 1 (lightname=\"%s\") is not a valid", p0.lineCount(), m_strFileName.c_str(), lightname, m_ri->RI_NULL);
					}
				}
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Illuminate' argument 1 (lightnumber) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Illuminate' argument 2 (onoff) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Illuminate' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Illuninate' arguments (lightnumber, onoff) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DISPLACEMENT:
		// Displacement name <parameterlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->displacementV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->displacementV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Displacement' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Displacement' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_TEXTURE_COORDINATES:
		// TextureCoordinates [ s1 t1 s2 t2 s3 t3 s4 t4 ]
		// TextureCoordinates s1 t1 s2 t2 s3 t3 s4 t4
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 1 [ s1 t1 s2 t2 s3 t3 s4 t4 ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 8 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' must have (an array of) 8 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->textureCoordinates(pv[0], pv[1], pv[2], pv[3], pv[4], pv[5], pv[6], pv[7]);
			if ( p0.getCard() > 8 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'TestureCoordinates' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 8 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];
			TRibParameter &p7 = m_parameters[7];
			RtFloat s1, t1, s2, t2, s3, t3, s4, t4;
			bool b0=p0.getFloat(s1), b1=p1.getFloat(t1),
				 b2=p2.getFloat(s2), b3=p3.getFloat(t2),
				 b4=p4.getFloat(s3), b5=p5.getFloat(t3),
				 b6=p6.getFloat(s4), b7=p7.getFloat(t4);
			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 && b7 ) {
				m_ri->textureCoordinates(s1, t1, s2, t2, s3, t3, s4, t4);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 1 (s1) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 2 (t1) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 3 (s2) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 4 (t2) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 5 (s3) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 6 (t3) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 7 (s4) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b7 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' argument 8 (t4) is not numeric", p7.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 8 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TextureCoordinates' arguments (s1, t1, s2, t2, s3, t3, s4, t4) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SHADING_RATE:
		// ShadingRate size
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat size;
			if ( p0.getFloat(size) ) {
				m_ri->shadingRate(size);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ShadingRate' argument 1 (size) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ShadingRate' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ShadingRate' argument (size) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SHADING_INTERPOLATION:
		// ShadingInterpolation type
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *type;
			if ( p0.getString(type) ) {
				m_ri->shadingInterpolation(type);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ShadingRate' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ShadingRate' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ShadingRate' argument (type) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MATTE:
		// Matte onoff
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtInt onoff;
			if ( p0.getInt(onoff) ) {
				m_ri->matte(onoff ? 1 : 0);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Matte' argument 1 (onoff) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Matte' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Matte' argument (onoff) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_BOUND:
		// Bound [ xmin xmax ymin ymax zmin zmax ]
		// Bound xmin xmax ymin ymax zmin zmax
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Bound' argument 1 (bound coordinates) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Bound' must have (an array of) 6 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			m_ri->bound((RtFloat *)p0.getValue());
			if ( p0.getCard() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Bound' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 6 ) {
			int i;
			RtBound bound;
			bool breakIt = false;
			for ( i=0; i<6; ++i ) {
				if ( !m_parameters[i].getFloat(bound[i]) ) {
					breakIt = true;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Bound' argument %d (bound coordinate) is not numeric", m_parameters[i].lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
				} 
				if ( breakIt )
					break;
			}
			m_ri->bound(bound);
			if ( m_parameters.size() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Bound' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Bound' arguments (xmin, xmax, ymin, ymax, zmin, zmax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DETAIL:
		// Detail [ xmin xmax ymin ymax zmin zmax ]
		// Detail xmin xmax ymin ymax zmin zmax
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Detail' argument 1 (bound coordinates) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Detail' must have (an array of) 6 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			m_ri->detail((RtFloat *)p0.getValue());
			if ( p0.getCard() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Detail' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 6 ) {
			int i;
			RtBound bound;
			bool breakIt = false;
			for ( i=0; i<6; ++i ) {
				if ( !m_parameters[i].getFloat(bound[i]) ) {
					breakIt = true;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Detail' argument %d (bound coordinate) is not numeric", m_parameters[i].lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
				} 
				if ( breakIt )
					break;
			}
			m_ri->detail(bound);
			if ( m_parameters.size() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Detail' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Detail' arguments (xmin, xmax, ymin, ymax, zmin, zmax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DETAIL_RANGE:
		// DetailRange [ minvisible lowertransition uppertransition maxvisible ]
		// DetailRange minvisible lowertransition uppertransition maxvisible
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' argument 1 [ minvisible lowertransition uppertransition maxvisible ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' must have (an array of) 4 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->detailRange(pv[0], pv[1], pv[2], pv[3]);
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'DetailRange' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 4 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			RtFloat minvis, lowtran, uptran, maxvis;
			bool b0 = p0.getFloat(minvis), b1 = p1.getFloat(lowtran), b2 = p2.getFloat(uptran), b3 = p3.getFloat(maxvis);
			if ( b0 && b1 && b2 && b3 ) {
				m_ri->detailRange(minvis, lowtran, uptran, maxvis);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' argument 1 (minvis) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' argument 2 (lowtran) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' argument 3 (uptran) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' argument 4 (maxvis) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'DetailRange' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'DetailRange' arguments (minvisible, lowertransition, uppertransition, maxvisible) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_GEOMETRIC_APPROXIMATION:
		// GeometricApproximation type value
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			const char *type;
			RtFloat value;
			bool b0 = p0.getString(type), b1 = p1.getFloat(value);
			if ( b0 && b1 ) {
				m_ri->geometricApproximation(type, value);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeometricApproximation' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeometricApproximation' argument 2 (value) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 2 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'GeometricApproximation' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeometricApproximation' (xmin, ymin, ymax, ymin) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_GEOMETRIC_REPRESENTATION:
		// GeometricRepresentation type
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *type;
			if ( p0.getString(type) ) {
				m_ri->geometricRepresentation(type);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeometricRepresentation' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'GeometricRepresentation' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeometricRepresentation' (type) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ORIENTATION:
		// Orientation orientation
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *orientation;
			if ( p0.getString(orientation) ) {
				m_ri->orientation(orientation);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Orientation' argument 1 (orientation) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Orientation' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Orientation' (orientation) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_REVERSE_ORIENTATION:
		// ReverseOrientation
		m_ri->reverseOrientation();
		if ( m_parameters.size() > 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ReverseOrientation' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SIDES:
		// Sides nside
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtInt nsides;
			if ( p0.getInt(nsides) ) {
				m_ri->sides(nsides);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sides' argument 1 (nsides) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Sides' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sides' (nsides) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_BASIS:
		// Basis uname  ustep vname  vstep
		// Basis uname  ustep vbasis vstep
		// Basis ubasis ustep vname  vstep
		// Basis ubasis ustep vbasis vstep
		if ( m_parameters.size() >= 4 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];

			p0.convertIntToFloat();
			p2.convertIntToFloat();

			RtBasis ubasis, vbasis;
			const char *uname, *vname;
			bool uset = false;
			bool vset = false;
			RtInt ustep, vstep;
			int i;

			RtFloat *b = NULL;

			if ( p0.typeID() == TYPEID_FLOAT && p0.isArray() && p0.getCard() == 16 ) {
				b = (RtFloat *)p0.getValue();
			} else if ( p0.getString(uname) ) {
				if ( !strcmp(uname, "bezier") ) b = &m_ri->bezierBasis[0][0];
				else if ( !strcmp(uname, "b-spline") ) b = &m_ri->bSplineBasis[0][0];
				else if ( !strcmp(uname, "catmullrom") ) b = &m_ri->catmullRomBasis[0][0];
				else if ( !strcmp(uname, "catmull-rom") ) b = &m_ri->catmullRomBasis[0][0];
				else if ( !strcmp(uname, "hermite") ) b = &m_ri->hermiteBasis[0][0];
				else if ( !strcmp(uname, "power") ) b = &m_ri->powerBasis[0][0];
				else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badbasis: 'Basis' argument 1 (ubasis:\"%s\") is unknown, using \"bezier\"", p0.lineCount(), m_strFileName.c_str(), uname, m_ri->RI_NULL);
					b = &m_ri->bezierBasis[0][0];
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Basis' argument 1 ubasis is not numeric/string or wrong number of elements, using \"power\"", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				b = &m_ri->powerBasis[0][0];
				ustep = m_ri->RI_POWERSTEP;
			}

			if ( b ) {
				for ( i = 0; i < 16; ++i ) {
					ubasis[i/4][i%4] = b[i];
				}
				uset = true;
			}

			b = NULL;
			if ( p2.typeID() == TYPEID_FLOAT && p2.isArray() && p2.getCard() == 16 ) {
				b = (RtFloat *)p2.getValue();
			} else if ( p2.getString(vname) ) {
				if ( !strcmp(vname, "bezier") ) b = &m_ri->bezierBasis[0][0];
				else if ( !strcmp(vname, "b-spline") ) b = &m_ri->bSplineBasis[0][0];
				else if ( !strcmp(vname, "catmullrom") ) b = &m_ri->catmullRomBasis[0][0];
				else if ( !strcmp(vname, "catmull-rom") ) b = &m_ri->catmullRomBasis[0][0];
				else if ( !strcmp(vname, "hermite") ) b = &m_ri->hermiteBasis[0][0];
				else if ( !strcmp(vname, "power") ) b = &m_ri->powerBasis[0][0];
				else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badbasis: 'Basis' argument 3 (vbasis:\"%s\") is unknown, using \"bezier\"", p2.lineCount(), m_strFileName.c_str(), vname, m_ri->RI_NULL);
					b = &m_ri->bezierBasis[0][0];
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Basis' argument 3 vbasis is not numeric/string or wrong number of elements, using \"power\"", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				b = &m_ri->powerBasis[0][0];
				vstep = m_ri->RI_POWERSTEP;
			}

			if ( b ) {
				for ( i = 0; i < 16; ++i ) {
					vbasis[i/4][i%4] = b[i];
				}
				vset = true;
			}

			bool b1 = p1.getInt(ustep), b3 = p3.getInt(vstep);
			if ( uset && b1 && vset && b3 ) {
				m_ri->basis(ubasis, ustep, vbasis, vstep);
			} else {
				if ( !uset ) {
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Basis' argument 1 (ubasis) could not get set", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Basis' argument 2 (ustep) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !vset ) {
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Basis' argument 3 (vbasis) could not get set", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Basis' argument 4 (vstep) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Basis' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Basis' (ubasis|uname, ustep, vbasis|vname, vstep) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_TRIM_CURVE:
		// TrimCurve [ ncurves ] [ order ] [ knot ] [ min ] [ max ] [ n ] [ u ] [ v ] [ w ]
		// TrimCurve nloops [ ncurves ] [ order ] [ knot ] [ min ] [ max ] [ n ] [ u ] [ v ] [ w ]
		//           with nloops == card(ncurves)
		// Special cases recognized to switch off trim curves:
		// TrimCurve 0
		// TrimCurve [ 0 ]
		// TrimCurve [ 0 ] [] [] [] [] [] [] [] []
		// TrimCurve [] [] [] [] [] [] [] [] []
		/*
		Example:

		nloops           - 2 (elems of ncurves[])
		TrimCurve  ncurves[nloops]  - [ 1 1 ]
		order[sumcurves] - [ 4 4 ]
		knot[]           - [ 0 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 15 15 15 16 16 16 16 0 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 5 ]
		amin[]           - [ 0 0 ]
		amax[]           - [ 16 5 ]
		n[sumcurves]     - [ 49 16 ]
		u[]              - [ 0.216594 0.228702 0.257058 0.459505 0.627541 0.70847 0.70847 0.70847 0.657874 0.61537 0.517633 0.419601 0.321863 0.026317 0 0 0 0.137641 0.331995 0.538457 0.645765 0.714586 0.72064 0.744919 0.902823 0.94335 0.969667 1 1 1 1 0.979737 0.957497 0.941311 0.904862 0.88256 0.88256 0.882561 0.88256 0.88256 0.88256 0.574906 0.489899 0.228702 0.060728 0.052635 0.107234 0.161995 0.216594 0.704454 0.704454 0.542472 0.376475 0.242911 0.184222 0.184222 0.184222 0.323902 0.410947 0.631556 0.676098 0.704454 0.704455 0.704454 0.704454 ]
		v[]              - [ 0.314607 0.242316 0.132002 0.132002 0.132002 0.186248 0.285691 0.379725 0.394184 0.397826 0.408669 0.408668 0.430385 0.462888 0.64737 0.726947 0.889686 1 1 1 0.913195 0.846256 0.918603 0.99095 0.99095 0.99095 0.980078 0.972849 0.934315 0.934314 0.857127 0.860714 0.864356 0.864356 0.864356 0.848077 0.808289 0.627043 0.627042 0.264003 0.021688 0 0 0 0.088571 0.314607 0.314608 0.314607 0.314607 0.645549 0.772143 0.867943 0.867943 0.867943 0.806468 0.703438 0.584074 0.560565 0.549694 0.524419 0.509906 0.490039 0.541825 0.541824 0.645549 ]
		w[]              - [ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ]
		*/
		if ( m_parameters.size() == 1 ) {
			// assume nloops == 0, disable trim curve
			RtInt nloops=0;
			TRibParameter &p0 = m_parameters[0]; // nloops
			if ( !p0.getInt(nloops) ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", 'TrimCurve' argument (nloops) has to be a 0 if there is only one argument, trim curve is disabled", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			} else if ( nloops != 0 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", 'TrimCurve' argument (nloops) has to be a 0 if there is only one argument, trim curve is disabled", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			// disable trim curve
			m_ri->trimCurve(0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
			break;
		}
		
		if ( m_parameters.size() >= 9 ) {

			TRibParameter &p0 = m_parameters[0]; // ncurves
			TRibParameter &p1 = m_parameters[1]; // order
			TRibParameter &p2 = m_parameters[2]; // knot
			TRibParameter &p3 = m_parameters[3]; // amin
			TRibParameter &p4 = m_parameters[4]; // amax
			TRibParameter &p5 = m_parameters[5]; // n
			TRibParameter &p6 = m_parameters[6]; // u
			TRibParameter &p7 = m_parameters[7]; // v
			TRibParameter &p8 = m_parameters[8]; // w

			p0.convertIntToFloat();
			p1.convertIntToFloat();
			p2.convertIntToFloat();
			p3.convertIntToFloat();
			p4.convertIntToFloat();
			p5.convertIntToFloat();
			p6.convertIntToFloat();
			p7.convertIntToFloat();
			p8.convertIntToFloat();

			int i = 0;
			RtInt nloops=0, sumcurves=0, *ncurves=NULL, *order=NULL, *n=NULL;
			RtFloat *knot=NULL, *amin=NULL, *amax=NULL, *u=NULL, *v=NULL, *w=NULL;
			RtFloat *pncurves = NULL, *porder = NULL, *pn = NULL;

			// The number of loops maybe empty
			if ( p0.typeID() != TYPEID_UNKNOWN ) {
				if ( p0.typeID() == TYPEID_FLOAT && p0.isArray() ) {
					nloops = (RtInt)p0.getCard();
					pncurves = (RtFloat *)p0.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 1 (ncurves) is not an array of numeric values", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}

			if ( nloops == 0 || pncurves == NULL || (nloops == 1 && pncurves[0] == (RtFloat)0) ) {
				// Disable trim curves, do not interpret the rest
				nloops = 0;
				m_ri->trimCurve(0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
			} else {

				// The number of curves per loop
				RtInt i_ncurves;
				std::vector<RtInt> ncurvesVect;
				ncurvesVect.reserve(nloops);
				sumcurves = 0;
				for ( i = 0; i < nloops; ++i ) {
					i_ncurves = (RtInt)pncurves[i];
					ncurvesVect.push_back(i_ncurves);
					sumcurves += i_ncurves;
				}
				if ( (int)ncurvesVect.size() != nloops ) {
					// not all values are defined
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TrimCurve' argument 1 (ncurves) not all elements could get copied", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					break;
				}
				ncurves = &ncurvesVect[0];

				// order vector
				if ( p1.typeID() == TYPEID_FLOAT && p1.isArray() ) {
					porder = (RtFloat *)p1.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 2 (order) is not an array of numeric values", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( porder == NULL ) {
					break;
				}

				RtInt i_order;
				std::vector<RtInt> orderVect;
				orderVect.reserve(sumcurves);
				for ( i = 0; i < sumcurves; ++i ) {
					i_order = (RtInt)porder[i];
					orderVect.push_back(i_order);
				}
				if ( (int)orderVect.size() != sumcurves ) {
					// not all values are defined
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TrimCurve' argument 2 (order) not all elements could get copied", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					break;
				}
				order = &orderVect[0];

				if ( p2.typeID() == TYPEID_FLOAT && p2.isArray() ) {
					knot = (RtFloat *)p2.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TrimCurve' argument 3 (knot) is not an array of numeric values", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !knot ) {
					break;
				}

				if ( p3.typeID() == TYPEID_FLOAT && p3.isArray() ) {
					amin = (RtFloat *)p3.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 4 (min) is not an array of numeric values", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !amin ) {
					break;
				}

				if ( p4.typeID() == TYPEID_FLOAT && p4.isArray() ) {
					amax = (RtFloat *)p4.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 5 (max) is not an array of numeric values", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !amax ) {
					break;
				}

				// n
				if ( p5.typeID() == TYPEID_FLOAT && p5.isArray() ) {
					pn = (RtFloat *)p5.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 6 (n) is not an array of numeric values", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( pn == NULL ) {
					break;
				}

				RtInt i_n;
				std::vector<RtInt> nVect;
				nVect.reserve(sumcurves);
				for ( i = 0; i < sumcurves; ++i ) {
					i_n = (RtInt)pn[i];
					nVect.push_back(i_n);
				}
				if ( (int)nVect.size() != sumcurves ) {
					// not all values are defined
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TrimCurve' argument 6 (n) not all elements could get copied", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					break;
				}
				n = &nVect[0];

				if ( p6.typeID() == TYPEID_FLOAT && p6.isArray() ) {
					u = (RtFloat *)p6.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 7 (u) is not an array of numeric values", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !u ) {
					break;
				}

				if ( p7.typeID() == TYPEID_FLOAT && p7.isArray() ) {
					v = (RtFloat *)p7.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 8 (v) is not an array of numeric values", p7.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !v ) {
					break;
				}

				if ( p8.typeID() == TYPEID_FLOAT && p8.isArray() ) {
					w = (RtFloat *)p8.getValue();
				} else {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'TrimCurve' argument 9 (w) is not an array of numeric values", p8.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !w ) {
					break;
				}

				m_ri->trimCurve(nloops, ncurves, order, knot, amin, amax, n, u, v, w);
			}

			if ( m_parameters.size() > 9 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'TrimCurve' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'TrimCurve' (ncurves, order, knot, min, max, n, u, v, w) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_IDENTITY:
		// Identity
		m_ri->identity();
		if ( m_parameters.size() > 0 ) {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Identity' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_TRANSFORM:
		// Transform [ transform ]
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() == TYPEID_FLOAT && p0.isArray() && p0.getCard() == 16 ) {
				RtFloat *m = (RtFloat *)p0.getValue();
				RtMatrix matrix;
				if ( m ) {
					int i;
					for ( i = 0; i < 16; ++i ) {
						matrix[i/4][i%4] = m[i];
					}
					m_ri->transform(matrix);
					if ( m_parameters.size() > 1 ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Transform' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
					}
				} else {
					m_ricb->handleError(RIE_BUG, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Transform' could not access matrix", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Transform' transformation matrix malformed", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Transform' (transform) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_CONCAT_TRANSFORM:
		// ConcatTransform [ transform ]
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() == TYPEID_FLOAT && p0.isArray() && p0.getCard() == 16 ) {
				RtFloat *m = (RtFloat *)p0.getValue();
				RtMatrix matrix;
				if ( m ) {
					int i;
					for ( i = 0; i < 16; ++i ) {
						matrix[i/4][i%4] = m[i];
					}
					m_ri->concatTransform(matrix);
					if ( m_parameters.size() > 1 ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ConcatTransform' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
					}
				} else {
					m_ricb->handleError(RIE_BUG, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ConcatTransform' could not access matrix", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'ConcatTransform' transformation matrix malformed", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ConcatTransform' (transform) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PERSPECTIVE:
		// Perspective fov
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat fov;
			if ( p0.getFloat(fov) ) {
				m_ri->perspective(fov);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Perspective' argument 1 (fov) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Perspective' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Perspective' (fov) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_TRANSLATE:
		// Translate [ dx dy dz ] (added)
		// Translate dx dy dz
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' argument 1 [ dx dy dz ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' must have (an array of) 3 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->translate(pv[0], pv[1], pv[2]);
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Translate' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 3 ) {
			RtFloat dx, dy, dz;
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			bool b0=p0.getFloat(dx), b1=p1.getFloat(dy), b2=p2.getFloat(dz);
			if ( b0 && b1 && b2 ) {
				m_ri->translate(dx, dy, dz);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' argument 1 (dx) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' argument 2 (dy) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' argument 3 (dz) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Translate' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Translate' (dx, dy, dz) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ROTATE:
		// Rotate [ angle dx dy dz ] (added)
		// Rotate angle dx dy dz
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' argument 1 [ angle dx dy dz ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' must have (an array of) 4 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->rotate(pv[0], pv[1], pv[2], pv[3]);
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Rotate' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 4 ) {
			RtFloat angle, dx, dy, dz;
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			bool b0=p0.getFloat(angle), b1=p1.getFloat(dx), b2=p2.getFloat(dy), b3=p3.getFloat(dz);
			if ( b0 && b1 && b2 && b3 ) {
				m_ri->rotate(angle, dx, dy, dz);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' argument 1 (angle) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' argument 2 (dx) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' argument 3 (dy) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' argument 4 (dz) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Rotate' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Rotate' (angle, dx, dy, dz) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SCALE:
		// Scale [ dx dy dz ] (added)
		// Scale dx dy dz
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' argument 1 [ dx dy dz ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' must have (an array of) 3 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->scale(pv[0], pv[1], pv[2]);
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Scale' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			RtFloat dx, dy, dz;
			bool b0=p0.getFloat(dx), b1=p1.getFloat(dy), b2=p2.getFloat(dz);
			if ( b0 && b1 && b2 ) {
				m_ri->scale(dx, dy, dz);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' argument 1 (dx) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' argument 2 (dy) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' argument 3 (dz) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Scale' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' (dx, dy, dz) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SKEW:
		// Skew [ angle dx1 dy1 dz1 dx2 dy2 dz2 ]
		// Skew angle dx1 dy1 dz1 dx2 dy2 dz2
		if ( m_parameters.size() == 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' argument 1 [ angle dx1 dy1 dz1 dx2 dy2 dz2 ] is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( !p0.isArray() || p0.getCard() < 7 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Scale' must have (an array of) 7 floats as arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat *pv = (RtFloat *)p0.getValue();
			m_ri->skew(pv[0], pv[1], pv[2], pv[3], pv[4], pv[5], pv[6]);
			if ( p0.getCard() > 7 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Scale' additional numbers ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else if ( m_parameters.size() >= 7 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];
			RtFloat angle, dx1, dy1, dz1, dx2, dy2, dz2;
			bool b0=p0.getFloat(angle),
				 b1=p1.getFloat(dx1), b2=p2.getFloat(dy1),
				 b3=p3.getFloat(dz1), b4=p4.getFloat(dx2),
				 b5=p5.getFloat(dy2), b6=p6.getFloat(dz2);
			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 ) {
				m_ri->skew(angle, dx1, dy1, dz1, dx2, dy2, dz2);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 1 (angle) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 2 (dx) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 3 (dy) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 4 (dz) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 5 (dx2) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 6 (dy2) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' argument 7 (dz2) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
			if ( m_parameters.size() > 7 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Skew' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Skew' (angle, dx, dy, dz, dx2, dy2, dz2) arguments missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_DEFORMATION:
		// Deformation name <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name;
			if ( p0.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->deformationV(name, 0, NULL, NULL);
				else
					m_ri->deformationV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Deformation' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Deformation' arguments (name, ...) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_COORDINATE_SYSTEM:
		// CoordinateSystem name
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *space;
			if ( p0.getString(space) ) {
				m_ri->coordinateSystem(space);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CoordinateSystem' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'CoordinateSystem' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CoordinateSystem' argument (name) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_COORD_SYS_TRANSFORM:
		// CoordSysTransform name
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *space;
			if ( p0.getString(space) ) {
				m_ri->coordSysTransform(space);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CoordSysTransForm' argument 1 (name) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'CoordSysTransForm' additional parameters are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'CoordSysTransForm' argument (name) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_TRANSFORM_POINTS:
		// No RIB binding, ignore
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'TransformPoints' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_POLYGON:
		// Polygon <paramlist>
		{
			int n = getTokenListNoCheck(0);	// Needed for numVertices
			if ( n > 0 ) {
				int nvertices = numVertices(0, n);
				if ( nvertices > 0 ) {
					TPolygonClasses p(nvertices);
					int n2 = getTokenList(0, p);	// Test number of parameter elements
					if ( n2 > 0 ) {
						m_ri->polygonV(nvertices, n2, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
					} else {
						m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Polygon' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
					}
				} else {
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Polygon' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			} else {
				if ( n == 0 )
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Polygon' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
			break;
		}

	case IDX_GENERAL_POLYGON:
		// GeneralPolygon [ nvertices ] <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertFloatToInt();

			int i;
			RtInt nloops=0, *nverts=NULL;
			RtInt *pnverts=NULL;

			// The number of loops
			if ( p0.typeID() == TYPEID_INT && p0.isArray() ) {
				nloops = (RtInt)p0.getCard();
				pnverts = (RtInt *)p0.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'GeneralPolygon' argument 1 (nvertices array), invalid type or not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( nloops == 0 || pnverts == NULL ) // Nothing to do
				break;

			// The number of vertices
			RtInt i_nverts;
			std::vector<RtInt> nvertsVect;
			nvertsVect.reserve(nloops);
			int sumverts = 0;
			for ( i = 0; i < nloops; ++i ) {
				i_nverts = pnverts[i];
				nvertsVect.push_back(i_nverts);
				sumverts += i_nverts;
			}
			if ( (int)nvertsVect.size() != nloops ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'GeneralPolygon' argument 1 (nvertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			nverts = &nvertsVect[0];
			TGeneralPolygonClasses p(nloops, nverts);
			int n = getTokenList(1, p);
			if ( n >= 0 ) {
				int nvertices = numVertices(1, n);
				if ( nvertices > 0 ) {
					m_ri->generalPolygonV(nloops, nverts, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeneralPolygon' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'GeneralPolygon' argument 1 (nvertices array) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_POINTS_POLYGONS:
		// PointsPolygons [ nvertices ] [ vertices ] <paramlist>
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			p0.convertFloatToInt();
			p1.convertFloatToInt();

			int i;
			RtInt npolys=0, *nverts=NULL, *verts=NULL;
			RtInt *pnverts=NULL, *pverts=NULL;

			// The number of polygons
			if ( p0.typeID() == TYPEID_INT && p0.isArray() ) {
				npolys = (RtInt)p0.getCard();
				pnverts = (RtInt *)p0.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 1 (nvertices array), invalid type or not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( npolys == 0 || pnverts == NULL ) // Nothing to do
				break;

			if ( p1.typeID() == TYPEID_INT && p1.isArray() ) {
				pverts = (RtInt *)p1.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 2 (vertices array), invalid type or not an array", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( pverts == NULL ) // Nothing to do
				break;

			// The number of vertices
			RtInt i_nverts;
			std::vector<RtInt> nvertsVect;
			nvertsVect.reserve(npolys);
			int sumverts = 0;
			for ( i = 0; i < npolys; ++i ) {
				i_nverts = pnverts[i];
				nvertsVect.push_back(i_nverts);
				sumverts += i_nverts;
			}
			if ( (int)nvertsVect.size() != npolys ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 1 (nvertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			nverts = &nvertsVect[0];

			// Test the size of the vertices array
			if ( sumverts < (RtInt)p1.getCard() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 2 (vertices array), invalid number of elements", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			if ( sumverts > (RtInt)p1.getCard() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 2 (vertices array), additional elements are ignored", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}

			// The vertices indexes
			RtInt i_verts;
			RtInt maxVertex=0;
			std::vector<RtInt> vertsVect;
			vertsVect.reserve(sumverts);
			for ( i = 0; i < sumverts; ++i ) {
				i_verts = pverts[i];
				if ( i_verts > maxVertex ) {
					maxVertex = i_verts;
				}
				vertsVect.push_back(i_verts);
			}
			if ( (int)vertsVect.size() != sumverts ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsPolygons' argument 2 (vertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			verts = &vertsVect[0];
			TPointsPolygonsClasses p(npolys, nverts, verts);
			int n = getTokenList(2, p);
			if ( n >= 0 ) {
				int nvertices = numVertices(2, n);
				if ( nvertices > 0 ) {
					m_ri->pointsPolygonsV(npolys, nverts, verts, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PointsPolygons' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PointsPolygons' arguments (nveritces array, vertices array) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_POINTS_GENERAL_POLYGONS:
		// PointsGeneralPolygons [ nloops ] [ nvertices ] [ vertices ] <paramlist>
		if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];

			p0.convertFloatToInt();
			p1.convertFloatToInt();
			p2.convertFloatToInt();

			int i;
			RtInt npolys=0, *nloops=NULL, *nverts=NULL, *verts=NULL;
			RtInt *pnloops=NULL, *pnverts=NULL, *pverts=NULL;

			// The number of polygons
			if ( p0.typeID() == TYPEID_INT && p0.isArray() ) {
				npolys = (RtInt)p0.getCard();
				pnloops = (RtInt *)p0.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 1 (nloops array), invalid type or not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( npolys == 0 || pnloops == NULL ) // Nothing to do
				break;

			if ( p1.typeID() == TYPEID_INT && p1.isArray() ) {
				pnverts = (RtInt *)p1.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 2 (nvertices array), invalid type or not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( pnverts == NULL ) // Nothing to do
				break;

			if ( p2.typeID() == TYPEID_INT && p2.isArray() ) {
				pverts = (RtInt *)p2.getValue();
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 3 (vertices array), invalid type or not an array", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( pverts == NULL ) // Nothing to do
				break;

			// The number of loops
			RtInt i_nloops;
			std::vector<RtInt> nloopsVect;
			nloopsVect.reserve(npolys);
			int sumloops = 0;
			for ( i = 0; i < npolys; ++i ) {
				i_nloops = (RtInt)pnloops[i];
				nloopsVect.push_back(i_nloops);
				sumloops += i_nloops;
			}
			if ( (int)nloopsVect.size() != npolys ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 1 (nloops nvertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			nloops = &nloopsVect[0];

			// The number of vertices
			RtInt i_nverts;
			std::vector<RtInt> nvertsVect;
			nvertsVect.reserve(npolys);
			int sumverts = 0;
			for ( i = 0; i < sumloops; ++i ) {
				i_nverts = pnverts[i];
				nvertsVect.push_back(i_nverts);
				sumverts += i_nverts;
			}
			if ( (int)nvertsVect.size() != sumloops ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 2 (nvertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			nverts = &nvertsVect[0];

			// The vertices indexes
			RtInt i_verts;
			std::vector<RtInt> vertsVect;
			vertsVect.reserve(sumverts);
			for ( i = 0; i < sumverts; ++i ) {
				i_verts = pverts[i];
				vertsVect.push_back(i_verts);
			}
			if ( (int)vertsVect.size() != sumverts ) {
				// not all values are defined
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'PointsGeneralPolygons' argument 3 (nvertices array), couldn't store all values", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			verts = &vertsVect[0];

			TPointsGeneralPolygonsClasses p(npolys, nloops, nverts, verts);
			int n = getTokenList(3, p);
			if ( n >= 0 ) {
				int nvertices = numVertices(3, n);
				if ( nvertices > 0 ) {
					m_ri->pointsGeneralPolygonsV(npolys, nloops, nverts, verts, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PointsGeneralPolygons' parameter missing, there must be a least a position parameter", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PointsGeneralPolygons' arguments (nloops array, nveritces array, vertices array) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PATCH:
		// Patch type <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];

			const char *type;
			if ( p0.getString(type) ) {
				if ( strcmp(type, m_ri->RI_BILINEAR) && strcmp(type, m_ri->RI_BICUBIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Patch' argument 1 (type \"%s\") must be \"bicubic\" or \"bilinear\"", p0.lineCount(), m_strFileName.c_str(), type, m_ri->RI_NULL);
					break;
				}
				TPatchClasses p(type);
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->patchV(type, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->patchV(type, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Patch' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Patch' argument (type) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PATCH_MESH:
		// PatchMesh type nu uwrap nv vwrap <paramlist>
		if ( m_parameters.size() >= 5 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];

			RtInt nu, nv;
			const char *type, *uwrap, *vwrap;
			bool b0 = p0.getString(type),
				 b1 = p1.getInt(nu), b2 = p2.getString(uwrap),
				 b3 = p3.getInt(nv), b4 = p4.getString(vwrap);
			if ( b0 && b1 && b2 && b3 && b4 ) {
				bool correct = true;

				if ( strcmp(uwrap, m_ri->RI_PERIODIC) && strcmp(uwrap, m_ri->RI_NONPERIODIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 3 (uwrap \"%s\") must be \"periodic\" or \"nonperiodic\"", p2.lineCount(), m_strFileName.c_str(), uwrap, m_ri->RI_NULL);
					correct = false;
				}

				if ( strcmp(vwrap, m_ri->RI_PERIODIC) && strcmp(vwrap, m_ri->RI_NONPERIODIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 5 (vwrap \"%s\") must be \"periodic\" or \"nonperiodic\"", p4.lineCount(), m_strFileName.c_str(), vwrap, m_ri->RI_NULL);
					correct = false;
				}

				if ( strcmp(type, m_ri->RI_BILINEAR) && strcmp(type, m_ri->RI_BICUBIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 1 (type \"%s\") must be \"bicubic\" or \"bilinear\"", p0.lineCount(), m_strFileName.c_str(), type, m_ri->RI_NULL);
					correct = false;
				}

				if ( !correct ) {
					break;
				}

				TPatchMeshClasses p(type, nu, m_ricb->curUStep(), uwrap, nv, m_ricb->curVStep(), vwrap);
				int n = getTokenList(5, p);
				if ( n > 0 )
					m_ri->patchMeshV(type, nu, uwrap, nv, vwrap, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->patchMeshV(type, nu, uwrap, nv, vwrap, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 2 (nu) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 3 (uwrap) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 4 (nv) is not a string", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' argument 5 (vwrap) is not a string", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'PatchMesh' arguments (type, nu, uwrap, nv, vwrap) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_NU_PATCH:
		// NuPatch nu uorder [ uknot ] umin umax nv vorder [ vknot ] vmin vmax <paramlist>
		if ( m_parameters.size() >= 10 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];
			TRibParameter &p7 = m_parameters[7];
			TRibParameter &p8 = m_parameters[8];
			TRibParameter &p9 = m_parameters[9];

			p2.convertIntToFloat();	// uknot
			p7.convertIntToFloat();	// vknot

			RtInt nu, uorder, nv, vorder;
			RtFloat *uknot=NULL, umin, umax, *vknot=NULL, vmin, vmax;

			if ( p2.isArray() && p2.typeID() == TYPEID_FLOAT ) {
				uknot = (RtFloat *)p2.getValue();
			}
			// else error message !b2 below

			if ( p7.isArray() && p7.typeID() == TYPEID_FLOAT ) {
				vknot = (RtFloat *)p7.getValue();
			}
			// else error message !b7 below

			bool b0=p0.getInt(nu), b1=p1.getInt(uorder), b2=uknot!=NULL, b3=p3.getFloat(umin), b4=p4.getFloat(umax), b5=p5.getInt(nv), b6=p6.getInt(vorder), b7=vknot!=NULL, b8=p8.getFloat(vmin), b9=p9.getFloat(vmax);

			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 && b7 && b8 && b9 ) {
				bool correct = true;
				if ( (RtInt)p2.getCard() < nu+uorder ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 2 (uknot), the number of knots must be nu+uorder", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				}
				if ( (RtInt)p2.getCard() > nu+uorder ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 2 (uknot), the number of knots must be nu+uorder, additional knots are ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( (RtInt)p7.getCard() < nv+vorder ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 8 (vknot), the number of knots must be nu+uorder", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				}
				if ( (RtInt)p7.getCard() > nv+vorder ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 8 (vknot), the number of knots must be nu+uorder, additional knots are ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}

				TNuPatchClasses p(nu, uorder, nv, vorder);
				int n = getTokenList(10, p);

				if ( !correct )
					break;

				if ( n > 0 ) {
					m_ri->nuPatchV(nu, uorder, uknot, umin, umax, nv, vorder, vknot, vmin, vmax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				} else {
					m_ri->nuPatchV(nu, uorder, uknot, umin, umax, nv, vorder, vknot, vmin, vmax, 0, NULL, NULL);
				}
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 1 (nu) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 2 (uorder) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'NuPatch' argument 3 (uknot) is not numeric or not an array", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 4 (umin) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 5 (umax) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 6 (nv) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 7 (vorder) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b7 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'NuPatch' argument 8 (vknot) is not numeric or not an array", p7.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b8 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 9 (vmin) is not numeric", p8.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b9 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' argument 10 (vmax) is not numeric", p9.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'NuPatch' arguments (nu, uorder, uknot, umin, umax, nv, vorder, vknot, vmin, vmax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SUBDIVISION_MESH:
		// SubdivisionMesh scheme [ nvertices ] [ vertices ] [ tags ] [ nargs ] [ intargs ] [ floatargs ] <paramlist>
		// SubdivisionMesh scheme [ nvertices ] [ vertices ] <paramlist>
		if ( m_parameters.size() >= 3 ) {
			const char *scheme=NULL;
			RtInt nfaces=0, *nvertices=NULL, *vertices=NULL, ntags=0;
			const char **tags=NULL;
			RtInt *nargs=NULL, *intargs=NULL;
			RtFloat *floatargs=NULL;
			bool correct = true;
			int nparameters = 3;
			RtInt nintargs=-1, nfloatargs=-1;

			TRibParameter &p0 = m_parameters[0]; // scheme
			TRibParameter &p1 = m_parameters[1]; // *nvertices
			TRibParameter &p2 = m_parameters[2]; // *vertices
			p1.convertFloatToInt();
			p2.convertFloatToInt();

			if ( m_parameters.size() >= 6 ) {
				TRibParameter &p3 = m_parameters[3]; // *tags

				if ( p3.typeID() == TYPEID_STRING && !p3.isArray() ) {
					nparameters = 3;
				} else {
					nparameters = 7;

					TRibParameter &p4 = m_parameters[4]; // *nargs
					TRibParameter &p5 = m_parameters[5]; // *intargs
					TRibParameter &p6 = m_parameters[6]; // *floatargs
					p4.convertFloatToInt();
					p5.convertFloatToInt();
					p6.convertIntToFloat();

					ntags = (RtInt)p3.getCard();
					if ( ntags != 0 ) {
						if ( p3.typeID() != TYPEID_STRING || !p3.isArray() ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 4 (tags) is not an array or elements are no strings", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
							correct = false;
						} else {
							tags = (const char **)p3.getValue();
						}
					}

					if ( p4.getCard() != 0 ) {
						if ( p4.typeID() != TYPEID_INT || !p4.isArray() ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 5 (nargs) is not an array or type is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
							correct = false;
						} else {
							nargs = (RtInt *)p4.getValue();
						}
					}

					if ( (RtInt)p4.getCard() < ntags*2 ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 5 (nargs) is not of the right size: %d expected, size %d", p4.lineCount(), m_strFileName.c_str(), (int)ntags*2, (int)p4.getCard(), m_ri->RI_NULL);
						correct = false;
					}
					if ( (RtInt)p4.getCard() > ntags*2 ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 5 (nargs) is not of the right size, additional values are ignored: %d expected, size %d", p4.lineCount(), m_strFileName.c_str(), (int)ntags, (int)p4.getCard(), m_ri->RI_NULL);
					}

					if ( (RtInt)p4.getCard() >= ntags*2 ) {
						int i;
						nintargs = nfloatargs = 0;
						for ( i=0; i <ntags*2; i+=2 ) {
							nintargs += nargs[i];
							nfloatargs += nargs[i+1];
						}
					}

					if ( p5.getCard() != 0 ) {
						if ( p5.typeID() != TYPEID_INT || !p5.isArray() ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 6 (intargs) is not an array or type is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
							correct = false;
						} else {
							intargs = (RtInt *)p5.getValue();
						}
					}

					if ( nintargs >= 0 ) {
						if ( (RtInt)p5.getCard() < nintargs ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 6 (intargs) is not of the right size: %d expected, size %d", p5.lineCount(), m_strFileName.c_str(), (int)nintargs, (int)p5.getCard(), m_ri->RI_NULL);
							correct = false;
						}
						if ( (RtInt)p5.getCard() > nintargs ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 6 (intargs) is not of the right size, additional values are ignored: %d expected, size %d", p5.lineCount(), m_strFileName.c_str(), (int)nintargs, (int)p5.getCard(), m_ri->RI_NULL);
						}
					}

					if ( p6.getCard() != 0 ) {
						if ( p6.typeID() != TYPEID_FLOAT || !p6.isArray() ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 7 (floatargs) is not an array or type is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
							correct = false;
						} else {
							floatargs = (RtFloat *)p6.getValue();
						}
					}

					if ( nfloatargs >= 0 ) {
						if ( (RtInt)p6.getCard() < nfloatargs ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 7 (floatargs) is not of the right size: %d expected, size %d", p6.lineCount(), m_strFileName.c_str(), (int)nfloatargs, (int)p6.getCard(), m_ri->RI_NULL);
							correct = false;
						}
						if ( (RtInt)p6.getCard() > nfloatargs ) {
							m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 7 (floatargs) is not of the right size, additional values are ignored: %d expected, size %d", p6.lineCount(), m_strFileName.c_str(), (int)nfloatargs, (int)p6.getCard(), m_ri->RI_NULL);
						}
					}

				}
			}

			if ( !p0.getString(scheme) ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'SubdivisionMesh' argument 1 (scheme) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}

			nfaces = (RtInt)p1.getCard();
			// if ( nfaces == 0 ) {
			//	m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 2 (nverices) has no values", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			//	correct = false;
			// }

			if ( nfaces != 0 ) {
				if ( p1.typeID() != TYPEID_INT || !p1.isArray() ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 2 (nvertices) is not an array or type is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				} else {
					nvertices = (RtInt *)p1.getValue();
				}
			}

			if ( p2.getCard() != 0 ) {
				if ( p2.typeID() != TYPEID_INT || !p2.isArray() ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 3 (vertices) is not an array or type is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				} else {
					vertices = (RtInt *)p2.getValue();
				}
			}

			RtInt i;
			RtInt sumVertices=0;
			if ( nvertices ) {
				for ( i=0; i<nfaces; ++i ) {
					sumVertices += nvertices[i];
				}
			}

			if ( sumVertices > (RtInt)p2.getCard() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 3 (vertices) array has not enough vertex index numbers", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( sumVertices < (RtInt)p2.getCard() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'SubdivisionMesh' argument 3 (vertices) additional index numbers are ignored", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}

			TSubdivisionMeshClasses p(nfaces, nvertices, vertices);
			int n = getTokenList(nparameters, p);
			if ( correct ) {
				if ( n > 0 ) 
					m_ri->subdivisionMeshV(scheme, nfaces, nvertices, vertices, ntags, tags, nargs, intargs, floatargs, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->subdivisionMeshV(scheme, nfaces, nvertices, vertices, ntags, tags, nargs, intargs, floatargs, 0, NULL, NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'SubdivisionMesh' arguments (scheme, nvertices, vertices, tags, nargs, intargs, floatargs) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_SPHERE: {
		// Sphere radius zmin zmax thetamax <paramlist>
		// Sphere [ radius zmin zmax thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 4 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];

			RtFloat radius, zmin, zmax, thetamax;
			bool b0=p0.getFloat(radius), b1=p1.getFloat(zmin), b2=p2.getFloat(zmax), b3=p3.getFloat(thetamax);
			if ( b0 && b1 && b2 && b3 ) {
				int n = getTokenList(4, p);
				if ( n > 0 )
					m_ri->sphereV(radius, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->sphereV(radius, zmin, zmax, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sphere' argument 1 (radius) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sphere' argument 2 (zmin) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Sphere' argument 3 (zmax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sphere' argument 4 (thetamax) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Sphere' arguments (radius, zmin, zmax, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Sphere' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Sphere' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}

			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Sphere' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat radius=vals[0], zmin=vals[1], zmax=vals[2], thetamax=vals[3];

			if ( n > 0 )
				m_ri->sphereV(radius, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->sphereV(radius, zmin, zmax, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Sphere' arguments (radius, zmin, zmax, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_CONE: {
		// Cone height radius thetamax <paramlist>
		// Cone [ height radius thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 3 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];

			RtFloat height, radius, thetamax;
			bool b0=p0.getFloat(height), b1=p1.getFloat(radius), b2=p2.getFloat(thetamax);
			if ( b0 && b1 && b2 ) {
				int n = getTokenList(3, p);
				if ( n > 0 )
					m_ri->coneV(height, radius, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->coneV(height, radius, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cone' argument 1 (height) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cone' argument 2 (radius) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cone' argument 3 (thetamax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;


			if ( p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cone' arguments (height, radius, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Cone' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}

			if ( p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cone' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}

			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cone' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat height=vals[0], radius=vals[1], thetamax=vals[2];

			if ( n > 0 )
				m_ri->coneV(height, radius, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->coneV(height, radius, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cone' arguments (height, radius, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_CYLINDER: {
		// Cylinder radius zmin zmax thetamax <paramlist>
		// Cylinder [ radius zmin zmax thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 4 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];

			RtFloat radius, zmin, zmax, thetamax;
			bool b0=p0.getFloat(radius), b1=p1.getFloat(zmin), b2=p2.getFloat(zmax), b3=p3.getFloat(thetamax);
			if ( b0 && b1 && b2 && b3 ) {
				int n = getTokenList(4, p);
				if ( n > 0 )
					m_ri->cylinderV(radius, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->cylinderV(radius, zmin, zmax, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cylinder' argument 1 (radius) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cylinder' argument 2 (zmin) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cylinder' argument 3 (zmax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cylinder' argument 4 (thetamax) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cylinder' arguments (radius, zmin, zmax, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Cylinder' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cylinder' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Cylinder' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}

			RtFloat radius=vals[0], zmin=vals[1], zmax=vals[2], thetamax=vals[3];
			if ( n > 0 )
				m_ri->cylinderV(radius, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->cylinderV(radius, zmin, zmax, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Cylinder' arguments (radius, zmin, zmax, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_HYPERBOLOID: {
		// Hyperboloid point1 point2 thetamax <paramlist>
		// Hyperboloid [ point1 point2 thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 7 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];

			RtPoint point1, point2;
			RtFloat thetamax;

			bool b0=p0.getFloat(point1[0]), b1=p1.getFloat(point1[1]), b2=p2.getFloat(point1[2]), b3=p3.getFloat(point2[0]), b4=p4.getFloat(point2[1]), b5=p5.getFloat(point2[2]), b6=p6.getFloat(thetamax);
			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 ) {
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->hyperboloidV(point1, point2, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->hyperboloidV(point1, point2, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 1 (p0.x) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 2 (p0.y) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Hyperboloid' argument 3 (p0.z) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 4 (p1.x) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 5 (p1.y) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 6 (p1.z) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' argument 7 (thetamax) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 7 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Hyperboloid' arguments (p0.x, p0.y, p0.z, p1.x, p1.y, p1.z, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 7 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Hyperboloid' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Hyperboloid' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Hyperboloid' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtPoint point1={vals[0],vals[1],vals[2]}, point2={vals[3],vals[4],vals[5]};
			RtFloat thetamax=vals[6];

			if ( n > 0 )
				m_ri->hyperboloidV(point1, point2, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->hyperboloidV(point1, point2, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Hyperboloid' arguments (p0.x, p0.y, p0.z, p1.x, p1.y, p1.z, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_PARABOLOID: {
		// Paraboloid rmax zmin zmax thetamax <paramlist>
		// Paraboloid [ rmax zmin zmax thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 4 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];

			RtFloat rmax, zmin, zmax, thetamax;
			bool b0=p0.getFloat(rmax), b1=p1.getFloat(zmin), b2=p2.getFloat(zmax), b3=p3.getFloat(thetamax);
			if ( b0 && b1 && b2 && b3 ) {
				int n = getTokenList(4, p);
				if ( n > 0 )
					m_ri->paraboloidV(rmax, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->paraboloidV(rmax, zmin, zmax, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Paraboloid' argument 1 (rmax) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Paraboloid' argument 2 (zmin) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Paraboloid' argument 3 (zmax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Paraboloid' argument 4 (thetamax) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 4 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Parabolid' arguments (rmax, zmin, zmax, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 4 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Parabolid' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Parabolid' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Parabolid' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}
			RtFloat rmax=vals[0], zmin=vals[1], zmax=vals[2], thetamax=vals[3];

			if ( n > 0 )
				m_ri->paraboloidV(rmax, zmin, zmax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->paraboloidV(rmax, zmin, zmax, thetamax,0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Paraboloid' arguments (rmax, zmin, zmax, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_DISK: {
		// Disk height radius thetamax <paramlist>
		// Disk [ height radius thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 3 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];

			RtFloat height, radius, thetamax;
			bool b0=p0.getFloat(height), b1=p1.getFloat(radius), b2=p2.getFloat(thetamax);
			if ( b0 && b1 && b2 ) {
				int n = getTokenList(3, p);
				if ( n > 0 )
					m_ri->diskV(height, radius, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->diskV(height, radius, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Disk' argument 1 (height) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Disk' argument 2 (radius) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Disk' argument 3 (thetamax) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 3 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Disk' arguments (height, radius, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Disk' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Disk' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Disk' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}

			RtFloat height=vals[0], radius=vals[1], thetamax=vals[2];
			if ( n > 0 )
				m_ri->diskV(height, radius, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->diskV(height, radius, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Disk' arguments (height, radius, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_TORUS: {
		// Torus majorrad minorrad phimin phimax thetamax <paramlist>
		// Torus [ majorrad minorrad phimin phimax thetamax ] <paramlist>
		TQuadricClasses p;
		if ( m_parameters.size() >= 5 && !m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];

			RtFloat majorrad, minorrad, phimin, phimax, thetamax;
			bool b0=p0.getFloat(majorrad), b1=p1.getFloat(minorrad), b2=p2.getFloat(phimin), b3=p3.getFloat(phimax), b4=p4.getFloat(thetamax);
			if ( b0 && b1 && b2 && b3 && b4 ) {
				int n = getTokenList(5, p);
				if ( n > 0 )
					m_ri->torusV(majorrad, minorrad, phimin, phimax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->torusV(majorrad, minorrad, phimin, phimax, thetamax, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Torus' argument 1 (majorrad) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Torus' argument 2 (minorrad) is not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Torus' argument 3 (phimin) is not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Torus' argument 4 (phimax) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Torus' argument 5 (thetamax) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else if ( m_parameters.size() >= 1 && m_parameters[0].isArray() ) {
			TRibParameter &p0 = m_parameters[0];
			p0.convertIntToFloat();
			bool correct = true;

			if ( p0.getCard() < 5 ) {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Torus' arguments (majorrad, minorrad, phimin, phimax, thetamax) missing", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			if ( p0.getCard() > 5 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Torus' additional arguments ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if (  p0.typeID() != TYPEID_FLOAT ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Torus' argument array 1, not all elements are numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			}
			int n = getTokenList(1, p);

			if ( !correct )
				break;

			RtFloat *vals = (RtFloat *)p0.getValue();
			if ( !vals ) {
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Torus' could not store arguments", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}

			RtFloat majorrad = vals[0], minorrad = vals[1], phimin = vals[2], phimax = vals[3], thetamax = vals[4];
			if ( n > 0 )
				m_ri->torusV(majorrad, minorrad, phimin, phimax, thetamax, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
			else
				m_ri->torusV(majorrad, minorrad, phimin, phimax, thetamax, 0, NULL, NULL);
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Torus' arguments (majorrad, minorrad, phimin, phimax, thetamax) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
	}
	break;

	case IDX_POINTS:
		// Points <paramlist>
		{
			int n = getTokenListNoCheck(0);	// Needed for numVertices
			if ( n > 0 ) {
				int npts = numVertices(0, n);
				if ( npts > 0 ) {
					TPointsClasses p(npts);
					n = getTokenList(0, p); // Test if number of elements are correct
					if ( n > 0 ) {
						m_ri->pointsV(npts, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
					} else {
						m_ri->pointsV(npts, 0, NULL, NULL);
					}
				} else {
					m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Points' arguments missing, there must be at least positional data", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			} else {
				m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Points' arguments missing, there must be at least positional data", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		}
		break;

	case IDX_CURVES:
		// Curves type [ nvertices ] wrap <paramlist>
		if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];	// type
			TRibParameter &p1 = m_parameters[1];    // nvertices
			TRibParameter &p2 = m_parameters[2];    // wrap

			p1.convertFloatToInt();

			RtInt ncurves=0, *nverts=NULL;
			bool correct = true;

			if ( p1.typeID() != TYPEID_INT || !p1.isArray() ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Curve' argument 2 (nverices) is not numeric or has no values", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			} else {
				ncurves = (RtInt)p1.getCard();
				nverts = (RtInt *)p1.getValue();
			}

			const char *type=NULL, *wrap=NULL;
			bool b0=p0.getString(type), b2=p2.getString(wrap);
			if ( b0 && b2 ) {
				bool isLinear = false;
				bool isPeriodic = false;
				if ( !strcmp(type, m_ri->RI_LINEAR) ) {
					isLinear = true;
				} else if ( strcmp(type, m_ri->RI_CUBIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Curve' argument 1 (type \"%s\") must be \"linear\" or \"cubic\"", p0.lineCount(), m_strFileName.c_str(), type, m_ri->RI_NULL);
					correct = false;
				}
				if ( !strcmp(wrap, m_ri->RI_PERIODIC) ) {
					isPeriodic = true;
				} else if ( strcmp(wrap, m_ri->RI_NONPERIODIC) ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Curve' argument 3 (type \"%s\") must be \"periodic\" or \"nonperiodic\"", p2.lineCount(), m_strFileName.c_str(), wrap, m_ri->RI_NULL);
					correct = false;
				}

				if ( !correct ) {
					break;
				}

				RtInt i;
				for ( i = 0; i < ncurves; ++i ) {
					if ( isLinear ) {
						if ( nverts[i] < 2 ) {
							correct = false;
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Curves \"linear\"' argument 2 (ncurves) at position %d must be >= 2", p0.lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
						}
					} else {
						if ( nverts[i] < 4 ) {
							correct = false;
							m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Curves \"cubic\"' argument 2 (ncurves) at position %d must be >= 4", p0.lineCount(), m_strFileName.c_str(), i, m_ri->RI_NULL);
						}
					}
				}

				if ( !correct ) {
					break;
				}
				TCurvesClasses p(type, ncurves, nverts, wrap, m_ricb->curVStep());
				int n = getTokenList(3, p);
				if ( n > 0 )
					m_ri->curvesV(type, ncurves, nverts, wrap, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->curvesV(type, ncurves, nverts, wrap, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Curves' argument 1 (type) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Curves' argument 3 (wrap) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Curves' arguments (type, nvertices array, wrap) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_BLOBBY:
		// Blobby nleaf [ codes ] [ floats ] [ strings ] <paramlist>
		if ( m_parameters.size() >= 4 ) {
			TRibParameter &p0 = m_parameters[0]; // nleaf
			TRibParameter &p1 = m_parameters[1]; // *codes
			TRibParameter &p2 = m_parameters[2]; // *floats
			TRibParameter &p3 = m_parameters[3]; // *strings
			p1.convertFloatToInt();
			p2.convertIntToFloat();

			RtInt nleaf=0, ncode=0, nflt=0, nstr=0;
			RtInt       *code = NULL;
			RtFloat     *flt  = NULL;
			const char **str  = NULL;

			bool correct = true;

			if ( p1.getCard() != 0 ) {
				if ( p1.typeID() != TYPEID_INT || !p1.isArray() ) {
					correct = false;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Blobby' argument 2 (codes) not an array or not numeric", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				} else {
					ncode = (RtInt)p1.getCard();
					code = (RtInt *)p1.getValue();
				}
			}

			if ( p2.getCard() != 0 ) {
				if ( p2.typeID() != TYPEID_FLOAT || !p2.isArray()  ) {
					correct = false;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Blobby' argument 3 (floats) not an array or not numeric", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				} else {
					nflt = (RtInt)p2.getCard();
					flt = (RtFloat *)p2.getValue();
				}
			}

			if ( p3.getCard() != 0 ) {
				if ( p3.typeID() != TYPEID_STRING || !p3.isArray()  ) {
					correct = false;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Blobby' argument 4 (strings) not an array or not string values", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				} else {
					nstr = (RtInt)p3.getCard();
					str = (const char **)p3.getValue();
				}
			}

			if ( p0.getInt(nleaf) ) {
				if ( correct ) {
					TBlobbyClasses p(nleaf);
					int n = getTokenList(4, p);
					if ( n > 0 ) {
						m_ri->blobbyV(nleaf, ncode, code, nflt, flt, nstr, str, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
					} else {
						m_ri->blobbyV(nleaf, ncode, code, nflt, flt, nstr, str, 0, NULL, NULL);
					}
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Blobby' argument 1 (nleaf) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_MISSINGDATA, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Blobby' arguments (nleaf, codes array, floats array, strings array) missing", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PROCEDURAL:
		// Procedural procname [ args ] [ bounds ]
		// Procedural "DelayedReadArchive" [ filename ] [ bounds ]
		// Procedural "ReadProgram" [ programname paramblock ] [ boundingbox ]
		// Procedural "DynamicLoad" [ dsoname paramblock ] [ boundingbox ]

		if ( m_parameters.size() >= 3 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];

			p2.convertIntToFloat();

			RtFloat *bound = NULL;
			const char *procname=NULL, **args=NULL;
			bool correct = true;

			if ( p0.typeID() != TYPEID_STRING ) {
				correct = false;
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' argument 1 (procname) not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			} else if ( !p0.getString(procname) ) {
				correct = false;
				m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' argument 1 (procname) could not read string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}

			if ( p1.typeID() != TYPEID_STRING || !p1.isArray() ) {
				correct = false;
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural' argument 2 (args) not an array or no strings", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			} else {
				args = (const char **)p1.getValue();
				if ( !args ) {
					correct = false;
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' argument 3 (bound) could not read string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		
			if ( p2.typeID() != TYPEID_FLOAT || !p2.isArray() ) {
				correct = false;
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural' argument 3 (bound) not an array or no floats", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			} else if ( p2.getCard() < 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural' argument 3 (bound) has not 6 members", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				correct = false;
			} else if ( p2.getCard() > 6 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Procedural' argument 3 (bound) has more than 6 members, additional members are ignored", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			} else {
				bound = (RtFloat *)p2.getValue();
				if ( !bound ) {
					correct = false;
					m_ricb->handleError(RIE_BUG, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' argument 3 (bound) could not read string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}

			if ( !correct ) {
				break;
			}

			if ( !strcmp(procname, "DelayedReadArchive") ) {
				if ( p1.getCard() < 1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural \"DelayedReadArchive\"' argument 2 (args) has no members", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				} else if ( p1.getCard() > 1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Procedural \"DelayedReadArchive\"' argument 2 (args) has more than 1 member, additional members are ignored", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( correct ) {
					m_ri->procedural((RtPointer)args, bound, m_ri->procDelayedReadArchive, NULL);
				}
			} else if ( !strcmp(procname, "RunProgram") ) {
				if ( p1.getCard() < 2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural \"RunProgram\"' argument 2 (args) has no members", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				} else if ( p1.getCard() > 2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Procedural \"RunProgram\"' argument 2 (args) has more than 2 member, additional members are ignored", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( correct ) {
					m_ri->procedural((RtPointer)args, bound, m_ri->procRunProgram, NULL);
				}
			} else if ( !strcmp(procname, "DynamicLoad") ) {
				if ( p1.getCard() < 2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: 'Procedural \"DynamicLoad\"' argument 2 (args) has no members", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
					correct = false;
				} else if ( p1.getCard() > 2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badarray: 'Procedural \"DynamicLoad\"' argument 2 (args) has more than 2 member, additional members are ignored", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( correct ) {
					m_ri->procedural((RtPointer)args, bound, m_ri->procDynamicLoad, NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' argument 1 (procname \"%s\") not \"DelayedReadArchive\", \"RunProgram\" or \"DynamicLoad\"", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				break;
			}

			if ( m_parameters.size() > 3 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'Procedural' additional arguments are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}

		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Procedural' not enough arguments (procname, args array, bounds array)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_PROC_DELAYED_READ_ARCHIVE:
		// No rib binding, ignore
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'ProcDelayedReadArchive' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_PROC_RUN_PROGRAM:
		// No rib binding, ignore
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'ProcRunProgram' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_PROC_DYNAMIC_LOAD:
		// No rib binding, ignore
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'ProcDynamicLoad' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_GEOMETRY:
		// Geometry name <paramlist>
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p = m_parameters[0];

			const char *name = NULL;
			if ( p.getString(name) ) {
				TParameterClasses p;
				int n = getTokenList(1, p);
				if ( n > 0 )
					m_ri->geometryV(name, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->geometryV(name, 0, NULL, NULL);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Geometry' argument 1 (name) is not a string", p.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'Geometry' argument missing (name)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_OBJECT_INSTANCE:
		// ObjectInstance number
		// ObjectInstance name (added)
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtInt number;
			const char *name = NULL;
			RtObjectHandle object;
			bool b1, b2 = false;
			b1 = p0.getInt(number);
			if ( !b1 )
				b2 = p0.getString(name);
			if ( b1 || b2 ) {
				if ( b1 ) {
					if ( !getObjectHandle(object, number) ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectInstance' argument 1 (objectnumber), could not find objecthandle for number %d", m_lineCount, m_strFileName.c_str(), number, m_ri->RI_NULL);
						break;
					}
				} else {
					if ( !getObjectHandle(object, name) ) {
						m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectInstance' argument 1 (objectnumber), could not find objecthandle for name \"%s\"", m_lineCount, m_strFileName.c_str(), name, m_ri->RI_NULL);
						break;
					}
				}

				m_ri->objectInstance(object);

				if ( m_parameters.size() > 1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ObjectInstance' additional arguments are ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
				}
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectInstance' argument 1 (objectnumber) is not numeric or string", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ObjectInstance' argument missing (objectnumber)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MAKE_TEXTURE:
		// MakeTexture picturename texturename swrap twrap filter swidth twidth <paramlist>
		if ( m_parameters.size() >= 7 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];

			const char *pic = NULL, *tex = NULL, *filtername = NULL;
			RtToken swrap = NULL, twrap = NULL;
			RtFilterFunc filterfunc = NULL;
			RtFloat swidth, twidth;

			bool b0=p0.getString(pic), b1=p1.getString(tex), b2=p2.getString(swrap), b3=p3.getString(twrap), b4=p4.getString(filtername), b5=p5.getFloat(swidth), b6=p6.getFloat(twidth);

			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 ) {
				filterfunc = getFilterFunc(filtername);
				if ( !filterfunc ) {
					filterfunc = (RtFilterFunc)&m_ri->boxFilter;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 5 (filter \"%s\"), could not find a filter with this name, using \"box\"", p4.lineCount(), m_strFileName.c_str(), filtername, m_ri->RI_NULL);
				}
				TParameterClasses p;
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->makeTextureV(pic, tex, swrap, twrap, filterfunc, swidth, twidth, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->makeTextureV(pic, tex, swrap, twrap, filterfunc, swidth, twidth, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 1 (picturename) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 2 (texturename) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 3 (swrap) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 4 (twrap) is not a string", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 5 (filter) is not a string", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 6 (swidth) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' argument 7 (twidth) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeTexture' arguments missing (picturename, texturename, swrap, twrap, filter, swidth, twidth)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MAKE_BUMP:
		// MakeBumb picturename texturename swrap twrap filter swidth twidth <paramlist>
		if ( m_parameters.size() >= 7 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];

			const char *pic = NULL, *tex = NULL, *filtername = NULL;
			RtToken swrap = NULL, twrap = NULL;
			RtFilterFunc filterfunc = NULL;
			RtFloat swidth, twidth;

			bool b0=p0.getString(pic), b1=p1.getString(tex), b2=p2.getString(swrap), b3=p3.getString(twrap), b4=p4.getString(filtername), b5=p5.getFloat(swidth), b6=p6.getFloat(twidth);

			if ( b0 && b1 && b2 && b3 && b4 && b5 && b6 ) {
				filterfunc = getFilterFunc(filtername);
				if ( !filterfunc ) {
					filterfunc = (RtFilterFunc)&m_ri->boxFilter;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBump' argument 5 (filter \"%s\"), could not find a filter with this name, using \"box\"", p4.lineCount(), m_strFileName.c_str(), filtername, m_ri->RI_NULL);
				}
				TParameterClasses p;
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->makeBumpV(pic, tex, swrap, twrap, filterfunc, swidth, twidth, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->makeBumpV(pic, tex, swrap, twrap, filterfunc, swidth, twidth, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 1 (picturename) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 2 (texturename) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 3 (swrap) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 4 (twrap) is not a string", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 5 (filter) is not a string", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 6 (swidth) is not numeric", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 7 (twidth) is not numeric", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' arguments missing (picturename, texturename, swrap, twrap, filter, swidth, twidth)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MAKE_LAT_LONG_ENVIRONMENT:
		// MakeLatLongEnvironment picturename texturename filter swidth twidth <paramlist>
		if ( m_parameters.size() >= 5 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];

			const char *pic=NULL, *tex=NULL, *filtername=NULL;
			RtFilterFunc filterfunc=NULL;
			RtFloat swidth, twidth;

			bool b0=p0.getString(pic), b1=p1.getString(tex), b2=p2.getString(filtername), b3=p3.getFloat(swidth), b4=p4.getFloat(twidth);

			if ( b0 && b1 && b2 && b3 && b4 ) {
				filterfunc = getFilterFunc(filtername);
				if ( !filterfunc ) {
					filterfunc = (RtFilterFunc)&m_ri->boxFilter;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeLatLongEnvironment' argument 3 (filter \"%s\"), could not find a filter with this name, using \"box\"", p2.lineCount(), m_strFileName.c_str(), filtername, m_ri->RI_NULL);
				}
				TParameterClasses p;
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->makeLatLongEnvironmentV(pic, tex, filterfunc, swidth, twidth, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->makeLatLongEnvironmentV(pic, tex, filterfunc, swidth, twidth, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 1 (picturename) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 2 (texturename) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 3 (filter) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 4 (swidth) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 5 (twidth) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeLatLongEnvironment' arguments missing (picturename, texturename, filter, swidth, twidth)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MAKE_CUBE_FACE_ENVIRONMENT:
		// MakeCubeFaceEnvironment px nx py ny pz nz texturename fov filter swidth twidth <paramlist>
		if ( m_parameters.size() >= 11 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];
			TRibParameter &p2 = m_parameters[2];
			TRibParameter &p3 = m_parameters[3];
			TRibParameter &p4 = m_parameters[4];
			TRibParameter &p5 = m_parameters[5];
			TRibParameter &p6 = m_parameters[6];
			TRibParameter &p7 = m_parameters[7];
			TRibParameter &p8 = m_parameters[8];
			TRibParameter &p9 = m_parameters[9];
			TRibParameter &p10 = m_parameters[10];

			const char *px=NULL, *nx=NULL, *py=NULL, *ny=NULL, *pz=NULL, *nz=NULL, *tex=NULL;
			RtFloat fov;
			const char *filtername=NULL;
			RtFilterFunc filterfunc=NULL;
			RtFloat swidth, twidth;

			bool b0=p0.getString(px), b1=p1.getString(nx),
				 b2=p2.getString(py), b3=p3.getString(ny),
				 b4=p4.getString(pz), b5=p5.getString(nz),
				 b6=p6.getString(tex), b7=p7.getFloat(fov),
				 b8=p8.getString(filtername), b9=p9.getFloat(swidth), b10=p10.getFloat(twidth);

			if (  b0 && b1 && b2 && b3 && b4 && b5 && b6 && b7 && b8 && b9 && b10 )
			{
				filterfunc = getFilterFunc(filtername);
				if ( !filterfunc ) {
					filterfunc = (RtFilterFunc)&m_ri->boxFilter;
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeLatLongEnvironment' argument 9 (filter \"%s\"), could not find a filter with this name, using \"box\"", p8.lineCount(), m_strFileName.c_str(), filtername, m_ri->RI_NULL);
				}
				TParameterClasses p;
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->makeCubeFaceEnvironmentV(px, nx, py, ny, pz, nz, tex, fov, filterfunc, swidth, twidth, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->makeCubeFaceEnvironmentV(px, nx, py, ny, pz, nz, tex, fov, filterfunc, swidth, twidth, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 1 (px) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 2 (nx) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b2 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 3 (py) is not a string", p2.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b3 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 4 (ny) is not numeric", p3.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b4 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 5 (pz) is not numeric", p4.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b5 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 6 (nz) is not a string", p5.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b6 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 7 (texturename) is not a string", p6.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b7 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 8 (fov) is not numeric", p7.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b8 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 9 (filter) is not a string", p8.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b9 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 10 (swidth) is not numeric", p9.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b10 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeBumb' argument 11 (twidth) is not numeric", p10.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeCubeFaceEnvironment' arguments missing (px, nx, py, ny, pz, nz, texturename, fov, filter, swidth, twidth)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_MAKE_SHADOW:
		// MakeShadow picturename texturename <paramlist>
		if ( m_parameters.size() >= 2 ) {
			TRibParameter &p0 = m_parameters[0];
			TRibParameter &p1 = m_parameters[1];

			const char *pic = NULL, *tex = NULL;

			bool b0=p0.getString(pic), b1=p1.getString(tex);

			if ( b0 && b1 ) {
				TParameterClasses p;
				int n = getTokenList(7, p);
				if ( n > 0 )
					m_ri->makeShadowV(pic, tex, n, &m_tokenList[0], (RtPointer *)&m_valueList[0]);
				else
					m_ri->makeShadowV(pic, tex, 0, NULL, NULL);
			} else {
				if ( !b0 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeShadow' argument 1 (picturename) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
				if ( !b1 ) {
					m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeShadow' argument 2 (shadowname) is not a string", p1.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
				}
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'MakeShadow' arguments missing (picturename, shadowname)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_ARCHIVE_RECORD:
		// No rib binding, ignore
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": 'ArchiveRecord' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		break;

	case IDX_READ_ARCHIVE:
		// ReadArchive filename
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			const char *name=NULL;
			if ( p0.getString(name) ) {
				// Propoagate the callback for Archives in Archives
				m_ri->readArchiveV(name, m_fctpArchiveCallback, m_n, m_tokens, m_params);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ReadArchive' argument 1 (filename) is not a string", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'ReadArchive' additional arguments are ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'ReadArchive' argument missing (filename)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	case IDX_VERSION:
		// ignore, should be 3.03
		// version 3.03
		if ( m_parameters.size() >= 1 ) {
			TRibParameter &p0 = m_parameters[0];
			RtFloat version;
			if ( p0.getFloat(version) ) {
				RtInt ver = (RtInt)(version*100.0+.5);
				if ( ver != 303 ) {
					// ignore
					// m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'version %1.2f' argument 1 should be 3.03", p0.lineCount(), m_strFileName.c_str(), version, m_ri->RI_NULL);
				}
				m_ri->archiveRecord(m_ri->RI_VERBATIM, "version %1.2f\n", version);
			} else {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'version' argument 1 (3.03) is not numeric", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
			if ( m_parameters.size() > 1 ) {
				m_ricb->handleError(RIE_CONSISTENCY, RIE_WARNING, "Line %ld, File \"%s\", badargument: 'version' first arguments are ignored", p0.lineCount(), m_strFileName.c_str(), m_ri->RI_NULL);
			}
		} else {
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badargument: 'version' argument missing (3.03)", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}
		break;

	default: // Token has no RIB binding
		m_ricb->handleError(RIE_BADTOKEN, RIE_WARNING, "Line %ld, File \"%s\": '%s' has no RIB binding, request is ignored", m_lineCount, m_strFileName.c_str(), m_tokenset[callId], m_ri->RI_NULL);
		break;
	}
}


RtInt TRibParser::parseNextCall() {

	// Find first/next call (lookahead)
	while ( m_lookahead != RIBPARSER_EOF && !isRiToken(m_lookahead) ) {
		m_code = -1;
		m_defineString = -1;
		m_lookahead = nextToken();
		if ( !isValidToken(m_lookahead) ) {
			m_ricb->handleError(RIE_BADTOKEN, RIE_ERROR, "Line %ld, File \"%s\", syntax: bad token \"%s\"", m_pifStream->lineCount(), m_strFileName.c_str(), &m_token[0], m_ri->RI_NULL);
		} else if ( !(isCommentToken(m_lookahead) || isRiToken(m_lookahead) || m_lookahead == RIBPARSER_EOF) ) {
			m_ricb->handleError(RIE_BADTOKEN, RIE_ERROR, "Line %ld, File \"%s\", syntax: \"%s\"", m_pifStream->lineCount(), m_strFileName.c_str(), &m_token[0], m_ri->RI_NULL);
		}
	}
	// Lookahead is eof or an ri token

	// handle any comments found (e.g. the first comments in a file)
	handleDeferedComments();

	// Set the current line counter
	m_lineCount = m_pifStream->lineCount();
	m_ricb->lineNo(m_lineCount);

	RtInt t = m_lookahead; // Call id of the current request, RIBPARSER_EOF if EOF

	// Clear parameter list
	m_braketDepth = 0;
	m_parameters.clear();

	// If there is a token ( t != EOF ), read the parameters
	if ( t >= 0 ) {
		// find the next token as lookahead
		do {
			m_code = -1;            // encoded request number (binary decoder)
			m_defineString = -1;    // encoded string number (binary decoder)
			m_lookahead = nextToken();  // get the next token
			if ( m_lookahead == RIBPARSER_NOT_A_TOKEN ) {	// Token not found
				m_ricb->handleError(RIE_BADTOKEN, RIE_ERROR, "Line %ld, File \"%s\", syntax: bad token \"%s\"", m_pifStream->lineCount(), m_strFileName.c_str(), &m_token[0], m_ri->RI_NULL);
				break;
			}
		} while ( m_lookahead != RIBPARSER_EOF && !isRiToken(m_lookahead) ); // while parameters are found
		// m_lookahead is the number of the next request or RIBPARSER_EOF if EOF is found

		if ( m_braketDepth > 0 ) {
			m_braketDepth = 0;
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Missing closing brakets", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}

		if ( m_braketDepth < 0 ) {
			m_braketDepth = 0;
			m_ricb->handleError(RIE_CONSISTENCY, RIE_ERROR, "Line %ld, File \"%s\", badarray: Too many closing brakets", m_lineCount, m_strFileName.c_str(), m_ri->RI_NULL);
		}

		handleCall(t);           // handles the RIB request of the previous look ahead
		handleDeferedComments(); // handles any comments found
	}

	return m_lookahead;
}


bool TRibParser::parseFile() {
	// Open a stream with hopefully RIB data
	if ( !openStream() ) {
		// Error while opening the stream, clean up and return
		closeStream();
		return false;
	}

	// Clear data array used by the binary decoder
	int i;
	for ( i = 0; i < 256; ++i )
		m_ribEncode[i] = RIBPARSER_NOT_A_TOKEN;

	// Clear the list of strings (binary decoder)
	m_stringMap.clear();

	// Clear handle maps (Handle number -> handle)
	m_mapLightHandle.clear();
	m_mapLightStrHandle.clear();
	m_mapObjectHandle.clear();
	m_mapObjectStrHandle.clear();

	// Clears any defered comments
	m_deferedCommentList.clear();

	m_code = -1;            // No defined token (binary)
	m_defineString = -1;	// No defind string (binary)
	m_lookahead = RIBPARSER_NOT_A_TOKEN;  // Initialize, no Token found

	while ( parseNextCall() != RIBPARSER_EOF ); // Parse all requests

	// Clear the handle maps
	m_mapLightHandle.clear();
	m_mapLightStrHandle.clear();
	m_mapObjectHandle.clear();
	m_mapObjectStrHandle.clear();

	// Clean up and return
	closeStream();
	return true;
}


void TRibParser::reset(const char *filename, TRi &ri, TRiCallbackInterface &ricb, RtArchiveCallback callback, int n, RtToken tokens[], RtPointer params[]) {
	// Close any open stream
	closeStream();
	// Set the filename if there is one, otherwise clear it
	m_strFileName = filename ? filename : "";
	// New Renderer
	m_ri = &ri;
	m_ricb = &ricb;
	// New callback function
	m_fctpArchiveCallback = callback;
	m_n = n;
	m_tokens = tokens;
	m_params = params;
}


void TRibParser::closeStream() {
	if ( m_pifStream ) {
		// Close the stream and free resources
		m_pifStream->close();
		delete m_pifStream;
		m_pifStream = NULL;
	}
	m_lineCount = 0;
	if ( m_ricb )
		m_ricb->lineNo(0);
	m_currentCallId = RIBPARSER_EOF;
}


bool TRibParser::openStream() {
	// Close the stream if one is already open
	closeStream();

	// No filename, no stream
	if ( m_strFileName.empty() )
		return false;

#ifdef WIN32
	{
		// Convert the '/' seperators to windows '\'
		unsigned int i;
		for ( i = 0; i < m_strFileName.size(); ++i )
			if ( m_strFileName[i] == '/' )
				m_strFileName[i] = '\\';
	}
#endif

	// Create a new input stream
	m_pifStream = new TRibIStream(&m_strFileName[0]);

	if ( m_pifStream ) {
		// Set the local to default 'C', there were situations,
		// where a different local was set - that leaded to serious
		// parsing problems.
		setlocale( LC_ALL, "C" );
		if ( m_ricb ) {
			m_ricb->archiveName(""); // Don't let renderer print line/file in HandleError
			m_ricb->lineNo(0);
		}
		return m_pifStream->reopen();
	}

	// Stream could not get opened
	return false;
}
