RiCPP

What's RenderMan?
Interface between Modeller and Render, Render-API.

What's RiCPP?
RiCPP is a C++ binding for Pixar's(TM) RenderMan(TM) Interface.
Future: Enhances the framework with animation capabilities (AniMan ?)

For what it can be used for?
It should serve the graphics programmer with a convenient framework 
for the task of implementing an RenderMan complient render by
assisting in the not render related stuff like: RIB (RenderMan Interface byte stream)
parsing, parameter checking, actualizing the graphics state and so on. People using
these renderes get a unified interface (as a bridge) for the different
kind of implementations. Interface for interactive tools (Modellers), convenient Render-API for
C++ programs.

What is it not?
A lot of things, mainly it is not a renderer.

How can I use it?
...much to say: Inherit from classes to build a renderer, use the resulting renderer either
by dynamically loading it (using an abstract factory) or by statical linking.
Both can be useful. Knowing the
RenderMan (TM) is needed and some knowledge of basic design patterns will help you to
understand how the framework works.

Are there some implemtations using RiCPP?
Yes, a 3D library for quick OpenGL output and one for dumping a RIB
(RenderMan Interface Bytestream) file.

-----------------------------

Who may be wants to use RiCPP

RiCPP adresses two groups of people
1. People who needs to use a programming interface for a RenderMan complient renderer and
2. People who wants to create a RenderMan complient renderer.

If you belong to the first group of people, you get a C++ binding that is very close to
Pixar's original C binding. You can load renderers implemented atop RiCPP dynamically or
bind them statically. A render can be a simple RIB output device, an OpenGL preview
renderer or of another type that get implemented some day. All can be used throught
the same interface TRi. TRi can be either a bridge to a concrete renderer, a gateway for
renderers in a Network or a builder for a scene graph, depending on the concrete renderer
that is used. Using TRi as a bridge is usefull if you need a simple RIB output for
your application or some ad hoc 3D graphics without the posibility of interaction
for the user. If you want to build
an application that offers some interaction facillities to the user, the usage of TRi
as a bridge might lead to some performance drawbacks. For these application there is the
possibility to use TRi as a facade for an implementation that is a builder for a scene graph,
which can be manipulated in a way that the result still can be serialized as a RIB stream.
For these graphs you can use special kinds of renderers that iterates this composite.
Of course this approach is more difficult to use as the bridge interface. However, you
cannot use RiCPP for animations directly. But an animation program may generate a
concrete scene graph for each frame, which can be rendered using RiCPP renderers.

People who wants to create an own RenderMan complient renderer get a tool that does all the
nasty work like rib parsing, parameter checking, status updates that must be done but
have very little to do with the rendering itself. So if you belong to this group you can use
RiCPP as a framework for your own renderer. Nevertheless, it will be not too easy I'm affraid.

Renderer Types
--------------

RIB writer
'Real' Renderer: REYES, Raytracing, Radiosity, ...
Proxy for rendering over a network, Pipeline (zipped binary) RIB as interface

	[TRiCPP->Proxy] -> [Proxy->RenderManager->Proxy]->[Proxy->Bridge]->[3rd party Renderer]->[Bridge->Proxy]  ->   [Proxy-Collector]->[File]
	Produces sequence  Parts the sequence             Write a RIBfile  render part  s         Reads and Sends frame Stores frames at           

	(s.a. BOINC, Sethi)
	Animations Frame by Frame (StateSnapshot after each frame) or Single frame: ideally Split a scene
	(depends on Renderer Algorithm) Line by Line (e.g. render every third line)
	or Bucket by Bucket (eg. render every third bucket),
